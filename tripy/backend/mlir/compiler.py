import ctypes
from tripy.backend.mlir.mlir_translator import lower_flat_ir_to_mlir
from tripy.flat_ir import FlatIR
from tripy.logging import G_LOGGER
from tripy.util import log_time
from tripy.backend.mlir.mlir import mlir_wrapper, void_ptr
from tripy.util.util import prefix_with_line_numbers


class FlatIRCompiler:
    """
    Represents the compiler for FlatIR which converts FlatIR into a StableHLO representation and compiles it into an executable using mlir-tensorrt compiler.
    """

    def __init__(self, flat_ir: FlatIR) -> None:
        self.compiler = mlir_wrapper()
        self.flat_ir = flat_ir
        # Store allocations done at the init of executor
        self.execargs = None
        self.executable = None

    def __enter__(self):
        self.executable = self.compile(self.flat_ir)
        # Prepare input arguments on device
        device_inputs = []
        for inp in self.flat_ir.inputs:
            inp_storage = inp[1]
            inp_array = inp_storage.data
            assert inp_storage.device.kind == "gpu", "Input tensors must be on device!"
            device_inputs.append(inp_array.data.ptr)
        device_inputs_arr = (ctypes.c_void_p * len(device_inputs))(*device_inputs)
        self.execargs = self.compiler.exec_initializer(self.executable, device_inputs_arr)
        return (self.executable, self.execargs)

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is not None:
            info = (exc_type, exc_value, traceback)
            G_LOGGER.exception("Execption occured in FlatIRCompiler", exc_info=info)

        # Destroy the allocations and the loadable executor.
        self.compiler.exec_destroy(self.executable, self.execargs)
        return False

    @log_time
    def compile(self, flat_ir: FlatIR) -> void_ptr:
        """
        Given a FlatIR, compile function traces the computation graph and generates a mlir-tensorrt executable.

        Args:
            flat_ir: FlatIR representation of the program that needs to be compiled.
        Returns:
            Pointer to the executable generated by the mlir-tensorrt compiler.
        """
        # Lower flatIR to corresponding StableHLO IR.
        mlir_module = lower_flat_ir_to_mlir(flat_ir)
        mlir_textual = mlir_module.__str__()
        G_LOGGER.ir_printer(f"StableHLO IR:\n{prefix_with_line_numbers(mlir_textual)}")
        return self.compiler.compile(mlir_textual)
