from tripy.backend.mlir.mlir_translator import lower_flat_ir_to_mlir
from tripy.flat_ir import FlatIR
from tripy.logging import G_LOGGER
from tripy.util import log_time
from tripy.backend.mlir.mlir import mlir_wrapper, void_ptr


class FlatIRCompiler:
    """
    Represents the compiler for FlatIR which converts FlatIR into a StableHLO representation and compiles it into an executable using mlir-tensorrt compiler.
    """

    def __init__(self) -> None:
        self.compiler = mlir_wrapper()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is not None:
            info = (exc_type, exc_value, traceback)
            G_LOGGER.exception("Execption occured in FlatIRCompiler", exc_info=info)
        return False

    @log_time
    def compile(self, flat_ir: FlatIR) -> void_ptr:
        """
        Given a FlatIR, compile function traces the computation graph and generates a mlir-tensorrt executable.

        Args:
            flat_ir: FlatIR representation of the program that needs to be compiled.
        Returns:
            Pointer to the executable generated by the mlir-tensorrt compiler.
        """

        # Lower flatIR to corresponding StableHLO IR.
        mlir_module = lower_flat_ir_to_mlir(flat_ir)
        mlir_textual = mlir_module.__str__()
        G_LOGGER.ir_printer(f"StableHLO IR:\n{mlir_textual}")
        return self.compiler.compile(mlir_textual)
