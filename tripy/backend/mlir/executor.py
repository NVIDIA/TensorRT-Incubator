from typing import List

import cupy as cp
import numpy as np

from tripy.backend.mlir.mlir import mlir_wrapper, void_ptr, ExecInitializerResult
from tripy.common.logging import G_LOGGER
from tripy.frontend import Tensor
from tripy.common.datatype import convert_tripy_to_numpy_dtype
from tripy.ops import Storage
from tripy.util import log_time


class FlatIRExecutor:
    """
    Manages the backend's executable. It can:
      - execute the executable generated by compiler with variable input tensors
    The compiled executable is held by the class instance and freed when the instance is destructed.
    """

    def __init__(self, executable) -> None:
        self.compiler = mlir_wrapper()
        assert executable is not None, "executable must be compiled!"
        self.executable = executable

    def destroy(self):
        self.compiler.exec_destroy(self.executable)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback) -> bool:
        if exc_type is not None:
            info = (exc_type, exc_value, traceback)
            G_LOGGER.exception("Exception occurred in FlatIRExecutor", exc_info=info)

        # Destroy the allocations and the loadable executor.
        self.destroy()

        return False

    @log_time
    def execute(self, inputs: List[Tensor] = []) -> List[np.ndarray]:
        """
        Executes the compiled MLIR program and returns the output of the computation as a list of numpy arrays.

        Args:
            inputs: a list of tripy Tensor for input tensors

        Returns:
            List[np.ndarray]: List of numpy arrays for the output tensors.
        """
        # Create execargs
        device_inputs = []
        for inp in inputs:
            if inp.const_fold:
                continue
            inp_storage = inp.op
            assert isinstance(inp_storage, Storage), "Input tensors must be evaluated!"
            if inp_storage.device.kind != "gpu":
                raise Exception("Input tensors must be on device!")
            device_inputs.append(inp_storage)
        exec_args = self.compiler.exec_initializer(self.executable, device_inputs)

        # Execute and populate device pointers.
        self.compiler.execute(self.executable, exec_args)

        # Create a list to store the output arrays
        outputs: List[np.ndarray] = []

        num_outputs: int = exec_args.output_shapes._length_
        num_devices: int = 1  # Assuming 1 device, adjust as needed

        for i in range(num_devices):
            for j in range(num_outputs):
                index = i * num_outputs + j
                s = exec_args.outputs[index]
                # Convert stored byte buffer to a numpy array and append to the list.
                # We could have just returned the byte buffer and let user interpret the data.
                outputs.append(s.data.byte_buffer.get().view(convert_tripy_to_numpy_dtype(s.dtype)).tolist())

        return outputs
