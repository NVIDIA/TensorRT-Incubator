from typing import List

import cupy as cp
import numpy as np

from tripy.backend.mlir.mlir import mlir_wrapper, void_ptr, ExecInitializerResult
from tripy.common.logging import G_LOGGER
from tripy.util import log_time


class FlatIRExecutor:
    """
    Represents the compiler for FlatIR which converts FlatIR into a StableHLO representation and compiles it into an executable using mlir-tensorrt compiler.
    """

    def __init__(self) -> None:
        self.compiler = mlir_wrapper()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type is not None:
            info = (exc_type, exc_value, traceback)
            G_LOGGER.exception("Execption occured in FlatIRExecutor", exc_info=info)

        return False

    @log_time
    def execute(self, executable: void_ptr, exec_args: ExecInitializerResult) -> List[np.ndarray]:
        """
        Executes the compiled MLIR program and returns the output of the computation as a list of numpy arrays.

        Args:
            executable (void_ptr): MLIR executable generated by FlatIRCompiler.
            exec_args (ExecInitializerResult): Result of the execution initializer.

        Returns:
            List[np.ndarray]: List of numpy arrays for the output tensors.
        """
        # Execute and populate device pointers.
        self.compiler.execute(executable, exec_args)

        # Create a list to store the output arrays
        outputs: List[np.ndarray] = []

        num_outputs: int = exec_args.output_shapes._length_
        num_devices: int = 1  # Assuming 1 device, adjust as needed

        for i in range(num_devices):
            for j in range(num_outputs):
                index = i * num_outputs + j
                shape = exec_args.output_shapes[index]

                # Calculate the total number of elements in the tensor
                nb_elements = np.prod(shape.dims.dims[: shape.dims.nb_dims])

                # Create a Cupy array with the same data pointer
                arr = cp.ndarray(
                    shape=(nb_elements,),
                    dtype=shape.get_cupy_dtype(),
                    memptr=exec_args.outputs[index].data,
                )

                # Convert Cupy array to a numpy array and append to the list
                outputs.append(cp.asnumpy(arr))

        return outputs
