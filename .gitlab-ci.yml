stages:
  - lint
  - build-dependencies
  - push-fallback-container
  - build-tripy-container
  - test
  - upload


variables:
  DOCKER_HOST: tcp://docker:2375
  # Avoid TLS because it's not enabled in our runner
  DOCKER_TLS_CERTDIR: ""
  CI_REGISTRY_IMAGE: "gitlab-master.nvidia.com:5005/tensorrt/poc/tripy"
  GIT_SUBMODULE_FORCE_HTTPS: "true"
  GIT_SUBMODULE_DEPTH: 0
  GIT_SUBMODULE_PATHS: ":(exclude)third_party/jax"
  GIT_DEPTH: 0


pre-commit:
  stage: lint
  image: python:3.9
  tags:
    - tripy-runner
  before_script:
    - pip install pre-commit
  script:
    - pre-commit run --all-files
  only:
    - merge_requests


build_stablehlo:
  stage: build-dependencies
  image: $CI_REGISTRY_IMAGE
  timeout: 3 hours
  script:
    # install build tools
    - python3 -m pip install pybind11
    - apt-get update && apt-get install -y clang ccache git-all lld ninja-build
    # get stablehlo repo
    - cd /usr/lib
    - rm -rf stablehlo || true
    - git clone --depth=1 https://github.com/openxla/stablehlo
    - cd stablehlo && git clone https://github.com/llvm/llvm-project.git
    - cd llvm-project && git fetch && git checkout $(cat ../build_tools/llvm_version.txt)
    - cd .. && mkdir -p python-build
    - build_tools/github_actions/ci_build_cmake_python_api.sh llvm-project python-build $PWD
    # copy stablehlo lib to tripy directory
    - cp -R /usr/lib/stablehlo $CI_PROJECT_DIR
  artifacts:
    name: "stablehlo-python-integration-lib"
    paths:
      - stablehlo
    expire_in: 1 week
    untracked: true
  tags:
    - tripy-runner
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always
    - when: never


build_mlir_tensorrt:
  stage: build-dependencies
  image: gitlab-master.nvidia.com:5005/tensorrt/poc/mlir/mlir-tensorrt:tripy
  services:
    - docker:24.0.5-dind
  before_script:
    - export GROUP_CICD_TOKEN=$GROUP_CICD_TOKEN
  timeout: 3 hours
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Set up mlir-tensorrt repo
    - git clone https://$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD@gitlab-master.nvidia.com/TensorRT/poc/mlir/mlir-tensorrt.git
    - cd mlir-tensorrt
    - git fetch
    - git checkout $(cat ../mlir-tensorrt.txt)
    - git submodule init
    # Replace ssh urls with https + CI tokens
    - git submodule set-url third_party/llvm-project https://$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD@gitlab-master.nvidia.com/initialdl/llvm-project-mirror.git
    - git submodule set-url third_party/triton https://$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD@gitlab-master.nvidia.com/initialdl/triton.git
    - git submodule update --depth 1
    # Setup bazel disk cache folder
    - mkdir -p ../.bazel-disk-cache || true
    - echo "build --disk_cache=$CI_PROJECT_DIR/.bazel-disk-cache" >> build_tools/bazel/.bazelrc
    - cat build_tools/bazel/.bazelrc
    - du -hd 0 ../.bazel-disk-cache || true
    # Setup CCACHE
    - export CCACHE_BASEDIR="$CI_PROJECT_DIR"
    - export CCACHE_DIR="$CI_PROJECT_DIR/ccache"
    - export CCACHE_COMPILERCHECK=content
    - ccache --zero-stats || true
    - ccache --show-stats || true
    # build
    - cmake -B build -S . -G Ninja
      -DMLIR_TRT_ENABLE_TRIPY=ON
      -DCMAKE_BUILD_TYPE=RelWithDebInfo
      -DCMAKE_CXX_COMPILER_LAUNCHER=ccache	-DCMAKE_C_COMPILER_LAUNCHER=ccache
      -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
      -DLLVM_USE_LINKER=lld
      -DMLIR_TRT_PACKAGE_CACHE_DIR="$CI_PROJECT_DIR/.cache.cpm"
    - ninja -C build all
  after_script:
    - export CCACHE_DIR="$CI_PROJECT_DIR/ccache"
    - ccache --show-stats || true
    - du -hd 0 .bazel-disk-cache || true
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .cache.cpm
      - ccache
      - .bazel-disk-cache
  artifacts:
    name: "mlir-tensorrt-integration-lib"
    paths:
      - mlir-tensorrt/build/lib/Integrations
    expire_in: 1 week
    untracked: true
  tags:
    - tripy-runner
  rules:
    - changes:
      - mlir-tensorrt.txt
      - .gitlab-ci.yml
      if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always


push_fallback_container:
  stage: push-fallback-container
  image: gitlab-master.nvidia.com:5005/tensorrt/poc/mlir/mlir-tensorrt:tripy
  services:
    - docker:24.0.5-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest
    - docker tag $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  tags:
    - tripy-runner
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always


build_container:
  stage: build-tripy-container
  image: gitlab-master.nvidia.com:5005/tensorrt/poc/mlir/mlir-tensorrt:tripy
  services:
    - docker:24.0.5-dind
  before_script:
    - docker info
    - export GROUP_CICD_TOKEN=$GROUP_CICD_TOKEN
  timeout: 2 hours
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - python3 scripts/download_dependencies.py --ci
    - docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  tags:
    - tripy-runner
  rules:
    # NOTE: When changing these conditions, also update the `upload` stage.
    - changes:
      - mlir-tensorrt.txt
      - Dockerfile
      - pyproject.toml
      - .gitlab-ci.yml
      if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"
      when: always


l0:
  stage: test
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  dependencies: []
  script:
    - python3 -m pytest tests/ -v
  tags:
    - tripy-runner
  only:
    - merge_requests


upload-dependencies:
  stage: upload
  image: gitlab-master.nvidia.com:5005/tensorrt/poc/mlir/mlir-tensorrt:tripy
  script:
   - python3 scripts/CI/upload_dependencies.py
  tags:
    - tripy-runner
  rules:
    - changes:
      - mlir-tensorrt.txt
      - .gitlab-ci.yml
      if: $CI_COMMIT_BRANCH == "main"
      when: always


upload-container:
  stage: upload
  image: gitlab-master.nvidia.com:5005/tensorrt/poc/mlir/mlir-tensorrt:tripy
  services:
    - docker:24.0.5-dind
  script:
   - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
   - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
   - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
   - docker push $CI_REGISTRY_IMAGE:latest
  tags:
    - tripy-runner
  rules:
    - changes:
      - mlir-tensorrt.txt
      - Dockerfile
      - pyproject.toml
      - .gitlab-ci.yml
      if: $CI_COMMIT_BRANCH == "main"
      when: always
