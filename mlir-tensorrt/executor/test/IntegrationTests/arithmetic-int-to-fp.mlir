// RUN: executor-opt -executor-lower-to-runtime-builtins %s | \
// RUN: executor-translate -mlir-to-lua | \
// RUN: executor-runner -input-type=lua

//===----------------------------------------------------------------------===//
//  Auto-generated tests for arith.remf
//  Generated by generate_remf_tests.py
//===----------------------------------------------------------------------===//

module {
  func.func private @sitofp_i8_f64(%x: i8) -> f64 attributes {no_inline} {
    %1 = executor.sitofp %x : i8 to f64
    return %1 : f64
  }

  func.func private @uitofp_i8_f64(%x: i8) -> f64 attributes {no_inline} {
    %1 = executor.uitofp %x : i8 to f64
    return %1 : f64
  }

  func.func private @sitofp_i16_f64(%x: i16) -> f64 attributes {no_inline} {
    %1 = executor.sitofp %x : i16 to f64
    return %1 : f64
  }

  func.func private @uitofp_i16_f64(%x: i16) -> f64 attributes {no_inline} {
    %1 = executor.uitofp %x : i16 to f64
    return %1 : f64
  }

  func.func private @sitofp_i32_f64(%x: i32) -> f64 attributes {no_inline} {
    %1 = executor.sitofp %x : i32 to f64
    return %1 : f64
  }

  func.func private @uitofp_i32_f64(%x: i32) -> f64 attributes {no_inline} {
    %1 = executor.uitofp %x : i32 to f64
    return %1 : f64
  }

  func.func private @sitofp_i64_f64(%x: i64) -> f64 attributes {no_inline} {
    %1 = executor.sitofp %x : i64 to f64
    return %1 : f64
  }

  func.func private @uitofp_i64_f64(%x: i64) -> f64 attributes {no_inline} {
    %1 = executor.uitofp %x : i64 to f64
    return %1 : f64
  }

  func.func private @sitofp_i4_f64(%x: i4) -> f64 attributes {no_inline} {
    %1 = executor.sitofp %x : i4 to f64
    return %1 : f64
  }

  func.func private @uitofp_i4_f64(%x: i4) -> f64 attributes {no_inline} {
    %1 = executor.uitofp %x : i4 to f64
    return %1 : f64
  }

  func.func private @sitofp_i8_f32(%x: i8) -> f32 attributes {no_inline} {
    %1 = executor.sitofp %x : i8 to f32
    return %1 : f32
  }

  func.func private @uitofp_i8_f32(%x: i8) -> f32 attributes {no_inline} {
    %1 = executor.uitofp %x : i8 to f32
    return %1 : f32
  }

  func.func private @sitofp_i16_f32(%x: i16) -> f32 attributes {no_inline} {
    %1 = executor.sitofp %x : i16 to f32
    return %1 : f32
  }

  func.func private @uitofp_i16_f32(%x: i16) -> f32 attributes {no_inline} {
    %1 = executor.uitofp %x : i16 to f32
    return %1 : f32
  }

  func.func private @sitofp_i32_f32(%x: i32) -> f32 attributes {no_inline} {
    %1 = executor.sitofp %x : i32 to f32
    return %1 : f32
  }

  func.func private @uitofp_i32_f32(%x: i32) -> f32 attributes {no_inline} {
    %1 = executor.uitofp %x : i32 to f32
    return %1 : f32
  }

  func.func private @sitofp_i64_f32(%x: i64) -> f32 attributes {no_inline} {
    %1 = executor.sitofp %x : i64 to f32
    return %1 : f32
  }

  func.func private @uitofp_i64_f32(%x: i64) -> f32 attributes {no_inline} {
    %1 = executor.uitofp %x : i64 to f32
    return %1 : f32
  }

  func.func private @sitofp_i4_f32(%x: i4) -> f32 attributes {no_inline} {
    %1 = executor.sitofp %x : i4 to f32
    return %1 : f32
  }

  func.func private @uitofp_i4_f32(%x: i4) -> f32 attributes {no_inline} {
    %1 = executor.uitofp %x : i4 to f32
    return %1 : f32
  }

  func.func private @sitofp_i8_f16(%x: i8) -> f16 attributes {no_inline} {
    %1 = executor.sitofp %x : i8 to f16
    return %1 : f16
  }

  func.func private @uitofp_i8_f16(%x: i8) -> f16 attributes {no_inline} {
    %1 = executor.uitofp %x : i8 to f16
    return %1 : f16
  }

  func.func private @sitofp_i16_f16(%x: i16) -> f16 attributes {no_inline} {
    %1 = executor.sitofp %x : i16 to f16
    return %1 : f16
  }

  func.func private @uitofp_i16_f16(%x: i16) -> f16 attributes {no_inline} {
    %1 = executor.uitofp %x : i16 to f16
    return %1 : f16
  }

  func.func private @sitofp_i32_f16(%x: i32) -> f16 attributes {no_inline} {
    %1 = executor.sitofp %x : i32 to f16
    return %1 : f16
  }

  func.func private @uitofp_i32_f16(%x: i32) -> f16 attributes {no_inline} {
    %1 = executor.uitofp %x : i32 to f16
    return %1 : f16
  }

  func.func private @sitofp_i64_f16(%x: i64) -> f16 attributes {no_inline} {
    %1 = executor.sitofp %x : i64 to f16
    return %1 : f16
  }

  func.func private @uitofp_i64_f16(%x: i64) -> f16 attributes {no_inline} {
    %1 = executor.uitofp %x : i64 to f16
    return %1 : f16
  }

  func.func private @sitofp_i4_f16(%x: i4) -> f16 attributes {no_inline} {
    %1 = executor.sitofp %x : i4 to f16
    return %1 : f16
  }

  func.func private @uitofp_i4_f16(%x: i4) -> f16 attributes {no_inline} {
    %1 = executor.uitofp %x : i4 to f16
    return %1 : f16
  }

  func.func private @sitofp_i8_bf16(%x: i8) -> bf16 attributes {no_inline} {
    %1 = executor.sitofp %x : i8 to bf16
    return %1 : bf16
  }

  func.func private @uitofp_i8_bf16(%x: i8) -> bf16 attributes {no_inline} {
    %1 = executor.uitofp %x : i8 to bf16
    return %1 : bf16
  }

  func.func private @sitofp_i16_bf16(%x: i16) -> bf16 attributes {no_inline} {
    %1 = executor.sitofp %x : i16 to bf16
    return %1 : bf16
  }

  func.func private @uitofp_i16_bf16(%x: i16) -> bf16 attributes {no_inline} {
    %1 = executor.uitofp %x : i16 to bf16
    return %1 : bf16
  }

  func.func private @sitofp_i32_bf16(%x: i32) -> bf16 attributes {no_inline} {
    %1 = executor.sitofp %x : i32 to bf16
    return %1 : bf16
  }

  func.func private @uitofp_i32_bf16(%x: i32) -> bf16 attributes {no_inline} {
    %1 = executor.uitofp %x : i32 to bf16
    return %1 : bf16
  }

  func.func private @sitofp_i64_bf16(%x: i64) -> bf16 attributes {no_inline} {
    %1 = executor.sitofp %x : i64 to bf16
    return %1 : bf16
  }

  func.func private @uitofp_i64_bf16(%x: i64) -> bf16 attributes {no_inline} {
    %1 = executor.uitofp %x : i64 to bf16
    return %1 : bf16
  }

  func.func private @sitofp_i4_bf16(%x: i4) -> bf16 attributes {no_inline} {
    %1 = executor.sitofp %x : i4 to bf16
    return %1 : bf16
  }

  func.func private @uitofp_i4_bf16(%x: i4) -> bf16 attributes {no_inline} {
    %1 = executor.uitofp %x : i4 to bf16
    return %1 : bf16
  }

  func.func private @sitofp_i8_f8E4M3FN(%x: i8) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.sitofp %x : i8 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func private @uitofp_i8_f8E4M3FN(%x: i8) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.uitofp %x : i8 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func private @sitofp_i16_f8E4M3FN(%x: i16) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.sitofp %x : i16 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func private @uitofp_i16_f8E4M3FN(%x: i16) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.uitofp %x : i16 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func private @sitofp_i32_f8E4M3FN(%x: i32) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.sitofp %x : i32 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func private @uitofp_i32_f8E4M3FN(%x: i32) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.uitofp %x : i32 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func private @sitofp_i64_f8E4M3FN(%x: i64) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.sitofp %x : i64 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func private @uitofp_i64_f8E4M3FN(%x: i64) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.uitofp %x : i64 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func private @sitofp_i4_f8E4M3FN(%x: i4) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.sitofp %x : i4 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func private @uitofp_i4_f8E4M3FN(%x: i4) -> f8E4M3FN attributes {no_inline} {
    %1 = executor.uitofp %x : i4 to f8E4M3FN
    return %1 : f8E4M3FN
  }

  func.func @test_sitofp_i8_f64_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f64_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : f64
    %1 = call @sitofp_i8_f64(%x) : (i8) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i8 failed"
    return
  }

  func.func @test_sitofp_i8_f64_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f64_1"()
    %x = executor.constant -1 : i8
    %expected = executor.constant -1.0 : f64
    %1 = call @sitofp_i8_f64(%x) : (i8) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i8 failed"
    return
  }

  func.func @test_sitofp_i8_f64_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f64_2"()
    %x = executor.constant 127 : i8
    %expected = executor.constant 127.0 : f64
    %1 = call @sitofp_i8_f64(%x) : (i8) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i8 failed"
    return
  }

  func.func @test_sitofp_i8_f64_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f64_3"()
    %x = executor.constant -128 : i8
    %expected = executor.constant -128.0 : f64
    %1 = call @sitofp_i8_f64(%x) : (i8) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i8 failed"
    return
  }

  func.func @test_uitofp_i8_f64_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f64_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : f64
    %1 = call @uitofp_i8_f64(%x) : (i8) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i8 failed"
    return
  }

  func.func @test_uitofp_i8_f64_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f64_1"()
    %x = executor.constant 1 : i8
    %expected = executor.constant 1.0 : f64
    %1 = call @uitofp_i8_f64(%x) : (i8) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i8 failed"
    return
  }

  func.func @test_uitofp_i8_f64_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f64_2"()
    %x = executor.constant 255 : i8
    %expected = executor.constant 255.0 : f64
    %1 = call @uitofp_i8_f64(%x) : (i8) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i8 failed"
    return
  }

  func.func @test_sitofp_i16_f64_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f64_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : f64
    %1 = call @sitofp_i16_f64(%x) : (i16) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i16 failed"
    return
  }

  func.func @test_sitofp_i16_f64_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f64_1"()
    %x = executor.constant -1 : i16
    %expected = executor.constant -1.0 : f64
    %1 = call @sitofp_i16_f64(%x) : (i16) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i16 failed"
    return
  }

  func.func @test_sitofp_i16_f64_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f64_2"()
    %x = executor.constant 32767 : i16
    %expected = executor.constant 32767.0 : f64
    %1 = call @sitofp_i16_f64(%x) : (i16) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i16 failed"
    return
  }

  func.func @test_sitofp_i16_f64_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f64_3"()
    %x = executor.constant -32768 : i16
    %expected = executor.constant -32768.0 : f64
    %1 = call @sitofp_i16_f64(%x) : (i16) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i16 failed"
    return
  }

  func.func @test_uitofp_i16_f64_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f64_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : f64
    %1 = call @uitofp_i16_f64(%x) : (i16) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i16 failed"
    return
  }

  func.func @test_uitofp_i16_f64_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f64_1"()
    %x = executor.constant 1 : i16
    %expected = executor.constant 1.0 : f64
    %1 = call @uitofp_i16_f64(%x) : (i16) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i16 failed"
    return
  }

  func.func @test_uitofp_i16_f64_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f64_2"()
    %x = executor.constant 65535 : i16
    %expected = executor.constant 65535.0 : f64
    %1 = call @uitofp_i16_f64(%x) : (i16) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i16 failed"
    return
  }

  func.func @test_sitofp_i32_f64_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f64_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : f64
    %1 = call @sitofp_i32_f64(%x) : (i32) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i32 failed"
    return
  }

  func.func @test_sitofp_i32_f64_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f64_1"()
    %x = executor.constant -1 : i32
    %expected = executor.constant -1.0 : f64
    %1 = call @sitofp_i32_f64(%x) : (i32) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i32 failed"
    return
  }

  func.func @test_sitofp_i32_f64_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f64_2"()
    %x = executor.constant 2147483647 : i32
    %expected = executor.constant 2147483647.0 : f64
    %1 = call @sitofp_i32_f64(%x) : (i32) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i32 failed"
    return
  }

  func.func @test_sitofp_i32_f64_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f64_3"()
    %x = executor.constant -2147483648 : i32
    %expected = executor.constant -2147483648.0 : f64
    %1 = call @sitofp_i32_f64(%x) : (i32) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i32 failed"
    return
  }

  func.func @test_uitofp_i32_f64_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f64_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : f64
    %1 = call @uitofp_i32_f64(%x) : (i32) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i32 failed"
    return
  }

  func.func @test_uitofp_i32_f64_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f64_1"()
    %x = executor.constant 1 : i32
    %expected = executor.constant 1.0 : f64
    %1 = call @uitofp_i32_f64(%x) : (i32) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i32 failed"
    return
  }

  func.func @test_uitofp_i32_f64_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f64_2"()
    %x = executor.constant 4294967295 : i32
    %expected = executor.constant 4294967295.0 : f64
    %1 = call @uitofp_i32_f64(%x) : (i32) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i32 failed"
    return
  }

  func.func @test_sitofp_i64_f64_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f64_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : f64
    %1 = call @sitofp_i64_f64(%x) : (i64) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i64 failed"
    return
  }

  func.func @test_sitofp_i64_f64_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f64_1"()
    %x = executor.constant -1 : i64
    %expected = executor.constant -1.0 : f64
    %1 = call @sitofp_i64_f64(%x) : (i64) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i64 failed"
    return
  }

  func.func @test_sitofp_i64_f64_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f64_2"()
    %x = executor.constant 9223372036854775807 : i64
    %expected = executor.constant 9.223372036854776e+18 : f64
    %1 = call @sitofp_i64_f64(%x) : (i64) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i64 failed"
    return
  }

  func.func @test_sitofp_i64_f64_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f64_3"()
    %x = executor.constant -9223372036854775808 : i64
    %expected = executor.constant -9.223372036854776e+18 : f64
    %1 = call @sitofp_i64_f64(%x) : (i64) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i64 failed"
    return
  }

  func.func @test_uitofp_i64_f64_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f64_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : f64
    %1 = call @uitofp_i64_f64(%x) : (i64) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i64 failed"
    return
  }

  func.func @test_uitofp_i64_f64_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f64_1"()
    %x = executor.constant 1 : i64
    %expected = executor.constant 1.0 : f64
    %1 = call @uitofp_i64_f64(%x) : (i64) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i64 failed"
    return
  }

  func.func @test_uitofp_i64_f64_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f64_2"()
    %x = executor.constant 18446744073709551615 : i64
    %expected = executor.constant 1.8446744073709552e+19 : f64
    %1 = call @uitofp_i64_f64(%x) : (i64) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i64 failed"
    return
  }

  func.func @test_sitofp_i4_f64_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f64_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : f64
    %1 = call @sitofp_i4_f64(%x) : (i4) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i4 failed"
    return
  }

  func.func @test_sitofp_i4_f64_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f64_1"()
    %x = executor.constant -1 : i4
    %expected = executor.constant -1.0 : f64
    %1 = call @sitofp_i4_f64(%x) : (i4) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i4 failed"
    return
  }

  func.func @test_sitofp_i4_f64_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f64_2"()
    %x = executor.constant 7 : i4
    %expected = executor.constant 7.0 : f64
    %1 = call @sitofp_i4_f64(%x) : (i4) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i4 failed"
    return
  }

  func.func @test_sitofp_i4_f64_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f64_3"()
    %x = executor.constant -8 : i4
    %expected = executor.constant -8.0 : f64
    %1 = call @sitofp_i4_f64(%x) : (i4) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "sitofp f64 i4 failed"
    return
  }

  func.func @test_uitofp_i4_f64_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f64_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : f64
    %1 = call @uitofp_i4_f64(%x) : (i4) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i4 failed"
    return
  }

  func.func @test_uitofp_i4_f64_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f64_1"()
    %x = executor.constant 1 : i4
    %expected = executor.constant 1.0 : f64
    %1 = call @uitofp_i4_f64(%x) : (i4) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i4 failed"
    return
  }

  func.func @test_uitofp_i4_f64_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f64_2"()
    %x = executor.constant 15 : i4
    %expected = executor.constant 15.0 : f64
    %1 = call @uitofp_i4_f64(%x) : (i4) -> (f64)
    executor.print "got %f, expected %f" (%1, %expected : f64, f64)
    %eq = executor.fcmp <oeq> %1, %expected : f64
    executor.assert %eq, "uitofp f64 i4 failed"
    return
  }

  func.func @test_sitofp_i8_f32_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f32_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : f32
    %1 = call @sitofp_i8_f32(%x) : (i8) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i8 failed"
    return
  }

  func.func @test_sitofp_i8_f32_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f32_1"()
    %x = executor.constant -1 : i8
    %expected = executor.constant -1.0 : f32
    %1 = call @sitofp_i8_f32(%x) : (i8) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i8 failed"
    return
  }

  func.func @test_sitofp_i8_f32_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f32_2"()
    %x = executor.constant 127 : i8
    %expected = executor.constant 127.0 : f32
    %1 = call @sitofp_i8_f32(%x) : (i8) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i8 failed"
    return
  }

  func.func @test_sitofp_i8_f32_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f32_3"()
    %x = executor.constant -128 : i8
    %expected = executor.constant -128.0 : f32
    %1 = call @sitofp_i8_f32(%x) : (i8) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i8 failed"
    return
  }

  func.func @test_uitofp_i8_f32_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f32_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : f32
    %1 = call @uitofp_i8_f32(%x) : (i8) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i8 failed"
    return
  }

  func.func @test_uitofp_i8_f32_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f32_1"()
    %x = executor.constant 1 : i8
    %expected = executor.constant 1.0 : f32
    %1 = call @uitofp_i8_f32(%x) : (i8) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i8 failed"
    return
  }

  func.func @test_uitofp_i8_f32_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f32_2"()
    %x = executor.constant 255 : i8
    %expected = executor.constant 255.0 : f32
    %1 = call @uitofp_i8_f32(%x) : (i8) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i8 failed"
    return
  }

  func.func @test_sitofp_i16_f32_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f32_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : f32
    %1 = call @sitofp_i16_f32(%x) : (i16) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i16 failed"
    return
  }

  func.func @test_sitofp_i16_f32_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f32_1"()
    %x = executor.constant -1 : i16
    %expected = executor.constant -1.0 : f32
    %1 = call @sitofp_i16_f32(%x) : (i16) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i16 failed"
    return
  }

  func.func @test_sitofp_i16_f32_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f32_2"()
    %x = executor.constant 32767 : i16
    %expected = executor.constant 32767.0 : f32
    %1 = call @sitofp_i16_f32(%x) : (i16) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i16 failed"
    return
  }

  func.func @test_sitofp_i16_f32_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f32_3"()
    %x = executor.constant -32768 : i16
    %expected = executor.constant -32768.0 : f32
    %1 = call @sitofp_i16_f32(%x) : (i16) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i16 failed"
    return
  }

  func.func @test_uitofp_i16_f32_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f32_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : f32
    %1 = call @uitofp_i16_f32(%x) : (i16) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i16 failed"
    return
  }

  func.func @test_uitofp_i16_f32_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f32_1"()
    %x = executor.constant 1 : i16
    %expected = executor.constant 1.0 : f32
    %1 = call @uitofp_i16_f32(%x) : (i16) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i16 failed"
    return
  }

  func.func @test_uitofp_i16_f32_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f32_2"()
    %x = executor.constant 65535 : i16
    %expected = executor.constant 65535.0 : f32
    %1 = call @uitofp_i16_f32(%x) : (i16) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i16 failed"
    return
  }

  func.func @test_sitofp_i32_f32_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f32_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : f32
    %1 = call @sitofp_i32_f32(%x) : (i32) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i32 failed"
    return
  }

  func.func @test_sitofp_i32_f32_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f32_1"()
    %x = executor.constant -1 : i32
    %expected = executor.constant -1.0 : f32
    %1 = call @sitofp_i32_f32(%x) : (i32) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i32 failed"
    return
  }

  func.func @test_sitofp_i32_f32_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f32_2"()
    %x = executor.constant 2147483647 : i32
    %expected = executor.constant 2147483647.0 : f32
    %1 = call @sitofp_i32_f32(%x) : (i32) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i32 failed"
    return
  }

  func.func @test_sitofp_i32_f32_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f32_3"()
    %x = executor.constant -2147483648 : i32
    %expected = executor.constant -2147483648.0 : f32
    %1 = call @sitofp_i32_f32(%x) : (i32) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i32 failed"
    return
  }

  func.func @test_uitofp_i32_f32_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f32_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : f32
    %1 = call @uitofp_i32_f32(%x) : (i32) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i32 failed"
    return
  }

  func.func @test_uitofp_i32_f32_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f32_1"()
    %x = executor.constant 1 : i32
    %expected = executor.constant 1.0 : f32
    %1 = call @uitofp_i32_f32(%x) : (i32) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i32 failed"
    return
  }

  func.func @test_uitofp_i32_f32_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f32_2"()
    %x = executor.constant 4294967295 : i32
    %expected = executor.constant 4294967295.0 : f32
    %1 = call @uitofp_i32_f32(%x) : (i32) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i32 failed"
    return
  }

  func.func @test_sitofp_i64_f32_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f32_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : f32
    %1 = call @sitofp_i64_f32(%x) : (i64) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i64 failed"
    return
  }

  func.func @test_sitofp_i64_f32_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f32_1"()
    %x = executor.constant -1 : i64
    %expected = executor.constant -1.0 : f32
    %1 = call @sitofp_i64_f32(%x) : (i64) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i64 failed"
    return
  }

  func.func @test_sitofp_i64_f32_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f32_2"()
    %x = executor.constant 9223372036854775807 : i64
    %expected = executor.constant 9.223372036854776e+18 : f32
    %1 = call @sitofp_i64_f32(%x) : (i64) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i64 failed"
    return
  }

  func.func @test_sitofp_i64_f32_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f32_3"()
    %x = executor.constant -9223372036854775808 : i64
    %expected = executor.constant -9.223372036854776e+18 : f32
    %1 = call @sitofp_i64_f32(%x) : (i64) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i64 failed"
    return
  }

  func.func @test_uitofp_i64_f32_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f32_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : f32
    %1 = call @uitofp_i64_f32(%x) : (i64) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i64 failed"
    return
  }

  func.func @test_uitofp_i64_f32_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f32_1"()
    %x = executor.constant 1 : i64
    %expected = executor.constant 1.0 : f32
    %1 = call @uitofp_i64_f32(%x) : (i64) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i64 failed"
    return
  }

  func.func @test_uitofp_i64_f32_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f32_2"()
    %x = executor.constant 18446744073709551615 : i64
    %expected = executor.constant 1.8446744073709552e+19 : f32
    %1 = call @uitofp_i64_f32(%x) : (i64) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i64 failed"
    return
  }

  func.func @test_sitofp_i4_f32_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f32_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : f32
    %1 = call @sitofp_i4_f32(%x) : (i4) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i4 failed"
    return
  }

  func.func @test_sitofp_i4_f32_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f32_1"()
    %x = executor.constant -1 : i4
    %expected = executor.constant -1.0 : f32
    %1 = call @sitofp_i4_f32(%x) : (i4) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i4 failed"
    return
  }

  func.func @test_sitofp_i4_f32_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f32_2"()
    %x = executor.constant 7 : i4
    %expected = executor.constant 7.0 : f32
    %1 = call @sitofp_i4_f32(%x) : (i4) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i4 failed"
    return
  }

  func.func @test_sitofp_i4_f32_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f32_3"()
    %x = executor.constant -8 : i4
    %expected = executor.constant -8.0 : f32
    %1 = call @sitofp_i4_f32(%x) : (i4) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "sitofp f32 i4 failed"
    return
  }

  func.func @test_uitofp_i4_f32_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f32_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : f32
    %1 = call @uitofp_i4_f32(%x) : (i4) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i4 failed"
    return
  }

  func.func @test_uitofp_i4_f32_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f32_1"()
    %x = executor.constant 1 : i4
    %expected = executor.constant 1.0 : f32
    %1 = call @uitofp_i4_f32(%x) : (i4) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i4 failed"
    return
  }

  func.func @test_uitofp_i4_f32_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f32_2"()
    %x = executor.constant 15 : i4
    %expected = executor.constant 15.0 : f32
    %1 = call @uitofp_i4_f32(%x) : (i4) -> (f32)
    executor.print "got %f, expected %f" (%1, %expected : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f32
    executor.assert %eq, "uitofp f32 i4 failed"
    return
  }

  func.func @test_sitofp_i8_f16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f16_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : f16
    %1 = call @sitofp_i8_f16(%x) : (i8) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i8 failed"
    return
  }

  func.func @test_sitofp_i8_f16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f16_1"()
    %x = executor.constant -1 : i8
    %expected = executor.constant -1.0 : f16
    %1 = call @sitofp_i8_f16(%x) : (i8) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i8 failed"
    return
  }

  func.func @test_sitofp_i8_f16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f16_2"()
    %x = executor.constant 127 : i8
    %expected = executor.constant 127.0 : f16
    %1 = call @sitofp_i8_f16(%x) : (i8) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i8 failed"
    return
  }

  func.func @test_sitofp_i8_f16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f16_3"()
    %x = executor.constant -128 : i8
    %expected = executor.constant -128.0 : f16
    %1 = call @sitofp_i8_f16(%x) : (i8) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i8 failed"
    return
  }

  func.func @test_uitofp_i8_f16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f16_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : f16
    %1 = call @uitofp_i8_f16(%x) : (i8) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i8 failed"
    return
  }

  func.func @test_uitofp_i8_f16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f16_1"()
    %x = executor.constant 1 : i8
    %expected = executor.constant 1.0 : f16
    %1 = call @uitofp_i8_f16(%x) : (i8) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i8 failed"
    return
  }

  func.func @test_uitofp_i8_f16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f16_2"()
    %x = executor.constant 255 : i8
    %expected = executor.constant 255.0 : f16
    %1 = call @uitofp_i8_f16(%x) : (i8) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i8 failed"
    return
  }

  func.func @test_sitofp_i16_f16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f16_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : f16
    %1 = call @sitofp_i16_f16(%x) : (i16) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i16 failed"
    return
  }

  func.func @test_sitofp_i16_f16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f16_1"()
    %x = executor.constant -1 : i16
    %expected = executor.constant -1.0 : f16
    %1 = call @sitofp_i16_f16(%x) : (i16) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i16 failed"
    return
  }

  func.func @test_sitofp_i16_f16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f16_2"()
    %x = executor.constant 32767 : i16
    %expected = executor.constant 32767.0 : f16
    %1 = call @sitofp_i16_f16(%x) : (i16) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i16 failed"
    return
  }

  func.func @test_sitofp_i16_f16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f16_3"()
    %x = executor.constant -32768 : i16
    %expected = executor.constant -32768.0 : f16
    %1 = call @sitofp_i16_f16(%x) : (i16) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i16 failed"
    return
  }

  func.func @test_uitofp_i16_f16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f16_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : f16
    %1 = call @uitofp_i16_f16(%x) : (i16) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i16 failed"
    return
  }

  func.func @test_uitofp_i16_f16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f16_1"()
    %x = executor.constant 1 : i16
    %expected = executor.constant 1.0 : f16
    %1 = call @uitofp_i16_f16(%x) : (i16) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i16 failed"
    return
  }

  func.func @test_uitofp_i16_f16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f16_2"()
    %x = executor.constant 65535 : i16
    %expected = executor.constant 0x7c00 : f16
    %1 = call @uitofp_i16_f16(%x) : (i16) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i16 failed"
    return
  }

  func.func @test_sitofp_i32_f16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f16_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : f16
    %1 = call @sitofp_i32_f16(%x) : (i32) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i32 failed"
    return
  }

  func.func @test_sitofp_i32_f16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f16_1"()
    %x = executor.constant -1 : i32
    %expected = executor.constant -1.0 : f16
    %1 = call @sitofp_i32_f16(%x) : (i32) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i32 failed"
    return
  }

  func.func @test_sitofp_i32_f16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f16_2"()
    %x = executor.constant 2147483647 : i32
    %expected = executor.constant 0x7c00 : f16
    %1 = call @sitofp_i32_f16(%x) : (i32) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i32 failed"
    return
  }

  func.func @test_sitofp_i32_f16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f16_3"()
    %x = executor.constant -2147483648 : i32
    %expected = executor.constant 0xfc00 : f16
    %1 = call @sitofp_i32_f16(%x) : (i32) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i32 failed"
    return
  }

  func.func @test_uitofp_i32_f16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f16_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : f16
    %1 = call @uitofp_i32_f16(%x) : (i32) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i32 failed"
    return
  }

  func.func @test_uitofp_i32_f16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f16_1"()
    %x = executor.constant 1 : i32
    %expected = executor.constant 1.0 : f16
    %1 = call @uitofp_i32_f16(%x) : (i32) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i32 failed"
    return
  }

  func.func @test_uitofp_i32_f16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f16_2"()
    %x = executor.constant 4294967295 : i32
    %expected = executor.constant 0x7c00 : f16
    %1 = call @uitofp_i32_f16(%x) : (i32) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i32 failed"
    return
  }

  func.func @test_sitofp_i64_f16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f16_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : f16
    %1 = call @sitofp_i64_f16(%x) : (i64) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i64 failed"
    return
  }

  func.func @test_sitofp_i64_f16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f16_1"()
    %x = executor.constant -1 : i64
    %expected = executor.constant -1.0 : f16
    %1 = call @sitofp_i64_f16(%x) : (i64) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i64 failed"
    return
  }

  func.func @test_sitofp_i64_f16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f16_2"()
    %x = executor.constant 9223372036854775807 : i64
    %expected = executor.constant 0x7c00 : f16
    %1 = call @sitofp_i64_f16(%x) : (i64) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i64 failed"
    return
  }

  func.func @test_sitofp_i64_f16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f16_3"()
    %x = executor.constant -9223372036854775808 : i64
    %expected = executor.constant 0xfc00 : f16
    %1 = call @sitofp_i64_f16(%x) : (i64) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i64 failed"
    return
  }

  func.func @test_uitofp_i64_f16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f16_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : f16
    %1 = call @uitofp_i64_f16(%x) : (i64) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i64 failed"
    return
  }

  func.func @test_uitofp_i64_f16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f16_1"()
    %x = executor.constant 1 : i64
    %expected = executor.constant 1.0 : f16
    %1 = call @uitofp_i64_f16(%x) : (i64) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i64 failed"
    return
  }

  func.func @test_uitofp_i64_f16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f16_2"()
    %x = executor.constant 18446744073709551615 : i64
    %expected = executor.constant 0x7c00 : f16
    %1 = call @uitofp_i64_f16(%x) : (i64) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i64 failed"
    return
  }

  func.func @test_sitofp_i4_f16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f16_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : f16
    %1 = call @sitofp_i4_f16(%x) : (i4) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i4 failed"
    return
  }

  func.func @test_sitofp_i4_f16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f16_1"()
    %x = executor.constant -1 : i4
    %expected = executor.constant -1.0 : f16
    %1 = call @sitofp_i4_f16(%x) : (i4) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i4 failed"
    return
  }

  func.func @test_sitofp_i4_f16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f16_2"()
    %x = executor.constant 7 : i4
    %expected = executor.constant 7.0 : f16
    %1 = call @sitofp_i4_f16(%x) : (i4) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i4 failed"
    return
  }

  func.func @test_sitofp_i4_f16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f16_3"()
    %x = executor.constant -8 : i4
    %expected = executor.constant -8.0 : f16
    %1 = call @sitofp_i4_f16(%x) : (i4) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "sitofp f16 i4 failed"
    return
  }

  func.func @test_uitofp_i4_f16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f16_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : f16
    %1 = call @uitofp_i4_f16(%x) : (i4) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i4 failed"
    return
  }

  func.func @test_uitofp_i4_f16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f16_1"()
    %x = executor.constant 1 : i4
    %expected = executor.constant 1.0 : f16
    %1 = call @uitofp_i4_f16(%x) : (i4) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i4 failed"
    return
  }

  func.func @test_uitofp_i4_f16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f16_2"()
    %x = executor.constant 15 : i4
    %expected = executor.constant 15.0 : f16
    %1 = call @uitofp_i4_f16(%x) : (i4) -> (f16)
    %2 = executor.extf %1 : f16 to f32
    %3 = executor.extf %expected : f16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f16
    executor.assert %eq, "uitofp f16 i4 failed"
    return
  }

  func.func @test_sitofp_i8_bf16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_bf16_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : bf16
    %1 = call @sitofp_i8_bf16(%x) : (i8) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i8 failed"
    return
  }

  func.func @test_sitofp_i8_bf16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_bf16_1"()
    %x = executor.constant -1 : i8
    %expected = executor.constant -1.0 : bf16
    %1 = call @sitofp_i8_bf16(%x) : (i8) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i8 failed"
    return
  }

  func.func @test_sitofp_i8_bf16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_bf16_2"()
    %x = executor.constant 127 : i8
    %expected = executor.constant 127.0 : bf16
    %1 = call @sitofp_i8_bf16(%x) : (i8) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i8 failed"
    return
  }

  func.func @test_sitofp_i8_bf16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_bf16_3"()
    %x = executor.constant -128 : i8
    %expected = executor.constant -128.0 : bf16
    %1 = call @sitofp_i8_bf16(%x) : (i8) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i8 failed"
    return
  }

  func.func @test_uitofp_i8_bf16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_bf16_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : bf16
    %1 = call @uitofp_i8_bf16(%x) : (i8) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i8 failed"
    return
  }

  func.func @test_uitofp_i8_bf16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_bf16_1"()
    %x = executor.constant 1 : i8
    %expected = executor.constant 1.0 : bf16
    %1 = call @uitofp_i8_bf16(%x) : (i8) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i8 failed"
    return
  }

  func.func @test_uitofp_i8_bf16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_bf16_2"()
    %x = executor.constant 255 : i8
    %expected = executor.constant 255.0 : bf16
    %1 = call @uitofp_i8_bf16(%x) : (i8) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i8 failed"
    return
  }

  func.func @test_sitofp_i16_bf16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_bf16_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : bf16
    %1 = call @sitofp_i16_bf16(%x) : (i16) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i16 failed"
    return
  }

  func.func @test_sitofp_i16_bf16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_bf16_1"()
    %x = executor.constant -1 : i16
    %expected = executor.constant -1.0 : bf16
    %1 = call @sitofp_i16_bf16(%x) : (i16) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i16 failed"
    return
  }

  func.func @test_sitofp_i16_bf16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_bf16_2"()
    %x = executor.constant 32767 : i16
    %expected = executor.constant 32767.0 : bf16
    %1 = call @sitofp_i16_bf16(%x) : (i16) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i16 failed"
    return
  }

  func.func @test_sitofp_i16_bf16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_bf16_3"()
    %x = executor.constant -32768 : i16
    %expected = executor.constant -32768.0 : bf16
    %1 = call @sitofp_i16_bf16(%x) : (i16) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i16 failed"
    return
  }

  func.func @test_uitofp_i16_bf16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_bf16_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : bf16
    %1 = call @uitofp_i16_bf16(%x) : (i16) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i16 failed"
    return
  }

  func.func @test_uitofp_i16_bf16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_bf16_1"()
    %x = executor.constant 1 : i16
    %expected = executor.constant 1.0 : bf16
    %1 = call @uitofp_i16_bf16(%x) : (i16) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i16 failed"
    return
  }

  func.func @test_uitofp_i16_bf16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_bf16_2"()
    %x = executor.constant 65535 : i16
    %expected = executor.constant 65535.0 : bf16
    %1 = call @uitofp_i16_bf16(%x) : (i16) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i16 failed"
    return
  }

  func.func @test_sitofp_i32_bf16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_bf16_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : bf16
    %1 = call @sitofp_i32_bf16(%x) : (i32) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i32 failed"
    return
  }

  func.func @test_sitofp_i32_bf16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_bf16_1"()
    %x = executor.constant -1 : i32
    %expected = executor.constant -1.0 : bf16
    %1 = call @sitofp_i32_bf16(%x) : (i32) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i32 failed"
    return
  }

  func.func @test_sitofp_i32_bf16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_bf16_2"()
    %x = executor.constant 2147483647 : i32
    %expected = executor.constant 2147483647.0 : bf16
    %1 = call @sitofp_i32_bf16(%x) : (i32) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i32 failed"
    return
  }

  func.func @test_sitofp_i32_bf16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_bf16_3"()
    %x = executor.constant -2147483648 : i32
    %expected = executor.constant -2147483648.0 : bf16
    %1 = call @sitofp_i32_bf16(%x) : (i32) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i32 failed"
    return
  }

  func.func @test_uitofp_i32_bf16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_bf16_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : bf16
    %1 = call @uitofp_i32_bf16(%x) : (i32) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i32 failed"
    return
  }

  func.func @test_uitofp_i32_bf16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_bf16_1"()
    %x = executor.constant 1 : i32
    %expected = executor.constant 1.0 : bf16
    %1 = call @uitofp_i32_bf16(%x) : (i32) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i32 failed"
    return
  }

  func.func @test_uitofp_i32_bf16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_bf16_2"()
    %x = executor.constant 4294967295 : i32
    %expected = executor.constant 4294967295.0 : bf16
    %1 = call @uitofp_i32_bf16(%x) : (i32) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i32 failed"
    return
  }

  func.func @test_sitofp_i64_bf16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_bf16_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : bf16
    %1 = call @sitofp_i64_bf16(%x) : (i64) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i64 failed"
    return
  }

  func.func @test_sitofp_i64_bf16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_bf16_1"()
    %x = executor.constant -1 : i64
    %expected = executor.constant -1.0 : bf16
    %1 = call @sitofp_i64_bf16(%x) : (i64) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i64 failed"
    return
  }

  func.func @test_sitofp_i64_bf16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_bf16_2"()
    %x = executor.constant 9223372036854775807 : i64
    %expected = executor.constant 9.223372036854776e+18 : bf16
    %1 = call @sitofp_i64_bf16(%x) : (i64) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i64 failed"
    return
  }

  func.func @test_sitofp_i64_bf16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_bf16_3"()
    %x = executor.constant -9223372036854775808 : i64
    %expected = executor.constant -9.223372036854776e+18 : bf16
    %1 = call @sitofp_i64_bf16(%x) : (i64) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i64 failed"
    return
  }

  func.func @test_uitofp_i64_bf16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_bf16_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : bf16
    %1 = call @uitofp_i64_bf16(%x) : (i64) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i64 failed"
    return
  }

  func.func @test_uitofp_i64_bf16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_bf16_1"()
    %x = executor.constant 1 : i64
    %expected = executor.constant 1.0 : bf16
    %1 = call @uitofp_i64_bf16(%x) : (i64) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i64 failed"
    return
  }

  func.func @test_uitofp_i64_bf16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_bf16_2"()
    %x = executor.constant 18446744073709551615 : i64
    %expected = executor.constant 1.8446744073709552e+19 : bf16
    %1 = call @uitofp_i64_bf16(%x) : (i64) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i64 failed"
    return
  }

  func.func @test_sitofp_i4_bf16_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_bf16_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : bf16
    %1 = call @sitofp_i4_bf16(%x) : (i4) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i4 failed"
    return
  }

  func.func @test_sitofp_i4_bf16_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_bf16_1"()
    %x = executor.constant -1 : i4
    %expected = executor.constant -1.0 : bf16
    %1 = call @sitofp_i4_bf16(%x) : (i4) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i4 failed"
    return
  }

  func.func @test_sitofp_i4_bf16_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_bf16_2"()
    %x = executor.constant 7 : i4
    %expected = executor.constant 7.0 : bf16
    %1 = call @sitofp_i4_bf16(%x) : (i4) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i4 failed"
    return
  }

  func.func @test_sitofp_i4_bf16_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_bf16_3"()
    %x = executor.constant -8 : i4
    %expected = executor.constant -8.0 : bf16
    %1 = call @sitofp_i4_bf16(%x) : (i4) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "sitofp bf16 i4 failed"
    return
  }

  func.func @test_uitofp_i4_bf16_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_bf16_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : bf16
    %1 = call @uitofp_i4_bf16(%x) : (i4) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i4 failed"
    return
  }

  func.func @test_uitofp_i4_bf16_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_bf16_1"()
    %x = executor.constant 1 : i4
    %expected = executor.constant 1.0 : bf16
    %1 = call @uitofp_i4_bf16(%x) : (i4) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i4 failed"
    return
  }

  func.func @test_uitofp_i4_bf16_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_bf16_2"()
    %x = executor.constant 15 : i4
    %expected = executor.constant 15.0 : bf16
    %1 = call @uitofp_i4_bf16(%x) : (i4) -> (bf16)
    %2 = executor.extf %1 : bf16 to f32
    %3 = executor.extf %expected : bf16 to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : bf16
    executor.assert %eq, "uitofp bf16 i4 failed"
    return
  }

  func.func @test_sitofp_i8_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f8E4M3FN_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @sitofp_i8_f8E4M3FN(%x) : (i8) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i8 failed"
    return
  }

  func.func @test_sitofp_i8_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f8E4M3FN_1"()
    %x = executor.constant -1 : i8
    %expected = executor.constant -1.0 : f8E4M3FN
    %1 = call @sitofp_i8_f8E4M3FN(%x) : (i8) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i8 failed"
    return
  }

  func.func @test_sitofp_i8_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f8E4M3FN_2"()
    %x = executor.constant 127 : i8
    %expected = executor.constant 127.0 : f8E4M3FN
    %1 = call @sitofp_i8_f8E4M3FN(%x) : (i8) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i8 failed"
    return
  }

  func.func @test_sitofp_i8_f8E4M3FN_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i8_f8E4M3FN_3"()
    %x = executor.constant -128 : i8
    %expected = executor.constant -128.0 : f8E4M3FN
    %1 = call @sitofp_i8_f8E4M3FN(%x) : (i8) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i8 failed"
    return
  }

  func.func @test_uitofp_i8_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f8E4M3FN_0"()
    %x = executor.constant 0 : i8
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @uitofp_i8_f8E4M3FN(%x) : (i8) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i8 failed"
    return
  }

  func.func @test_uitofp_i8_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f8E4M3FN_1"()
    %x = executor.constant 1 : i8
    %expected = executor.constant 1.0 : f8E4M3FN
    %1 = call @uitofp_i8_f8E4M3FN(%x) : (i8) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i8 failed"
    return
  }

  func.func @test_uitofp_i8_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i8_f8E4M3FN_2"()
    %x = executor.constant 255 : i8
    %expected = executor.constant 255.0 : f8E4M3FN
    %1 = call @uitofp_i8_f8E4M3FN(%x) : (i8) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i8 failed"
    return
  }

  func.func @test_sitofp_i16_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f8E4M3FN_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @sitofp_i16_f8E4M3FN(%x) : (i16) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i16 failed"
    return
  }

  func.func @test_sitofp_i16_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f8E4M3FN_1"()
    %x = executor.constant -1 : i16
    %expected = executor.constant -1.0 : f8E4M3FN
    %1 = call @sitofp_i16_f8E4M3FN(%x) : (i16) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i16 failed"
    return
  }

  func.func @test_sitofp_i16_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f8E4M3FN_2"()
    %x = executor.constant 32767 : i16
    %expected = executor.constant 448. : f8E4M3FN
    %1 = call @sitofp_i16_f8E4M3FN(%x) : (i16) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i16 failed"
    return
  }

  func.func @test_sitofp_i16_f8E4M3FN_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i16_f8E4M3FN_3"()
    %x = executor.constant -32768 : i16
    %expected = executor.constant -448. : f8E4M3FN
    %1 = call @sitofp_i16_f8E4M3FN(%x) : (i16) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i16 failed"
    return
  }

  func.func @test_uitofp_i16_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f8E4M3FN_0"()
    %x = executor.constant 0 : i16
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @uitofp_i16_f8E4M3FN(%x) : (i16) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i16 failed"
    return
  }

  func.func @test_uitofp_i16_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f8E4M3FN_1"()
    %x = executor.constant 1 : i16
    %expected = executor.constant 1.0 : f8E4M3FN
    %1 = call @uitofp_i16_f8E4M3FN(%x) : (i16) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i16 failed"
    return
  }

  func.func @test_uitofp_i16_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i16_f8E4M3FN_2"()
    %x = executor.constant 65535 : i16
    %expected = executor.constant 448. : f8E4M3FN
    %1 = call @uitofp_i16_f8E4M3FN(%x) : (i16) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i16 failed"
    return
  }

  func.func @test_sitofp_i32_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f8E4M3FN_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @sitofp_i32_f8E4M3FN(%x) : (i32) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i32 failed"
    return
  }

  func.func @test_sitofp_i32_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f8E4M3FN_1"()
    %x = executor.constant -1 : i32
    %expected = executor.constant -1.0 : f8E4M3FN
    %1 = call @sitofp_i32_f8E4M3FN(%x) : (i32) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i32 failed"
    return
  }

  func.func @test_sitofp_i32_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f8E4M3FN_2"()
    %x = executor.constant 2147483647 : i32
    %expected = executor.constant 448. : f8E4M3FN
    %1 = call @sitofp_i32_f8E4M3FN(%x) : (i32) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i32 failed"
    return
  }

  func.func @test_sitofp_i32_f8E4M3FN_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i32_f8E4M3FN_3"()
    %x = executor.constant -2147483648 : i32
    %expected = executor.constant -448. : f8E4M3FN
    %1 = call @sitofp_i32_f8E4M3FN(%x) : (i32) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i32 failed"
    return
  }

  func.func @test_uitofp_i32_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f8E4M3FN_0"()
    %x = executor.constant 0 : i32
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @uitofp_i32_f8E4M3FN(%x) : (i32) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i32 failed"
    return
  }

  func.func @test_uitofp_i32_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f8E4M3FN_1"()
    %x = executor.constant 1 : i32
    %expected = executor.constant 1.0 : f8E4M3FN
    %1 = call @uitofp_i32_f8E4M3FN(%x) : (i32) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i32 failed"
    return
  }

  func.func @test_uitofp_i32_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i32_f8E4M3FN_2"()
    %x = executor.constant 4294967295 : i32
    %expected = executor.constant 448. : f8E4M3FN
    %1 = call @uitofp_i32_f8E4M3FN(%x) : (i32) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i32 failed"
    return
  }

  func.func @test_sitofp_i64_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f8E4M3FN_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @sitofp_i64_f8E4M3FN(%x) : (i64) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i64 failed"
    return
  }

  func.func @test_sitofp_i64_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f8E4M3FN_1"()
    %x = executor.constant -1 : i64
    %expected = executor.constant -1.0 : f8E4M3FN
    %1 = call @sitofp_i64_f8E4M3FN(%x) : (i64) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i64 failed"
    return
  }

  func.func @test_sitofp_i64_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f8E4M3FN_2"()
    %x = executor.constant 9223372036854775807 : i64
    %expected = executor.constant 448. : f8E4M3FN
    %1 = call @sitofp_i64_f8E4M3FN(%x) : (i64) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i64 failed"
    return
  }

  func.func @test_sitofp_i64_f8E4M3FN_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i64_f8E4M3FN_3"()
    %x = executor.constant -9223372036854775808 : i64
    %expected = executor.constant -448. : f8E4M3FN
    %1 = call @sitofp_i64_f8E4M3FN(%x) : (i64) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i64 failed"
    return
  }

  func.func @test_uitofp_i64_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f8E4M3FN_0"()
    %x = executor.constant 0 : i64
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @uitofp_i64_f8E4M3FN(%x) : (i64) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i64 failed"
    return
  }

  func.func @test_uitofp_i64_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f8E4M3FN_1"()
    %x = executor.constant 1 : i64
    %expected = executor.constant 1.0 : f8E4M3FN
    %1 = call @uitofp_i64_f8E4M3FN(%x) : (i64) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i64 failed"
    return
  }

  func.func @test_uitofp_i64_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i64_f8E4M3FN_2"()
    %x = executor.constant 18446744073709551615 : i64
    %expected = executor.constant 448. : f8E4M3FN
    %1 = call @uitofp_i64_f8E4M3FN(%x) : (i64) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i64 failed"
    return
  }

  func.func @test_sitofp_i4_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f8E4M3FN_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @sitofp_i4_f8E4M3FN(%x) : (i4) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i4 failed"
    return
  }

  func.func @test_sitofp_i4_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f8E4M3FN_1"()
    %x = executor.constant -1 : i4
    %expected = executor.constant -1.0 : f8E4M3FN
    %1 = call @sitofp_i4_f8E4M3FN(%x) : (i4) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i4 failed"
    return
  }

  func.func @test_sitofp_i4_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f8E4M3FN_2"()
    %x = executor.constant 7 : i4
    %expected = executor.constant 7.0 : f8E4M3FN
    %1 = call @sitofp_i4_f8E4M3FN(%x) : (i4) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i4 failed"
    return
  }

  func.func @test_sitofp_i4_f8E4M3FN_3() attributes {no_inline} {
    executor.print "test @test_sitofp_i4_f8E4M3FN_3"()
    %x = executor.constant -8 : i4
    %expected = executor.constant -8.0 : f8E4M3FN
    %1 = call @sitofp_i4_f8E4M3FN(%x) : (i4) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "sitofp f8E4M3FN i4 failed"
    return
  }

  func.func @test_uitofp_i4_f8E4M3FN_0() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f8E4M3FN_0"()
    %x = executor.constant 0 : i4
    %expected = executor.constant 0.0 : f8E4M3FN
    %1 = call @uitofp_i4_f8E4M3FN(%x) : (i4) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i4 failed"
    return
  }

  func.func @test_uitofp_i4_f8E4M3FN_1() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f8E4M3FN_1"()
    %x = executor.constant 1 : i4
    %expected = executor.constant 1.0 : f8E4M3FN
    %1 = call @uitofp_i4_f8E4M3FN(%x) : (i4) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i4 failed"
    return
  }

  func.func @test_uitofp_i4_f8E4M3FN_2() attributes {no_inline} {
    executor.print "test @test_uitofp_i4_f8E4M3FN_2"()
    %x = executor.constant 15 : i4
    %expected = executor.constant 15.0 : f8E4M3FN
    %1 = call @uitofp_i4_f8E4M3FN(%x) : (i4) -> (f8E4M3FN)
    %2 = executor.extf %1 : f8E4M3FN to f32
    %3 = executor.extf %expected : f8E4M3FN to f32
    executor.print "got %f, expected %f" (%2, %3 : f32, f32)
    %eq = executor.fcmp <oeq> %1, %expected : f8E4M3FN
    executor.assert %eq, "uitofp f8E4M3FN i4 failed"
    return
  }

  // ---- Entrypoint ----
  func.func @main() -> i32{
    call @test_sitofp_i8_f64_0() : () -> ()
    call @test_sitofp_i8_f64_1() : () -> ()
    call @test_sitofp_i8_f64_2() : () -> ()
    call @test_sitofp_i8_f64_3() : () -> ()
    call @test_uitofp_i8_f64_0() : () -> ()
    call @test_uitofp_i8_f64_1() : () -> ()
    call @test_uitofp_i8_f64_2() : () -> ()
    call @test_sitofp_i16_f64_0() : () -> ()
    call @test_sitofp_i16_f64_1() : () -> ()
    call @test_sitofp_i16_f64_2() : () -> ()
    call @test_sitofp_i16_f64_3() : () -> ()
    call @test_uitofp_i16_f64_0() : () -> ()
    call @test_uitofp_i16_f64_1() : () -> ()
    call @test_uitofp_i16_f64_2() : () -> ()
    call @test_sitofp_i32_f64_0() : () -> ()
    call @test_sitofp_i32_f64_1() : () -> ()
    call @test_sitofp_i32_f64_2() : () -> ()
    call @test_sitofp_i32_f64_3() : () -> ()
    call @test_uitofp_i32_f64_0() : () -> ()
    call @test_uitofp_i32_f64_1() : () -> ()
    call @test_uitofp_i32_f64_2() : () -> ()
    call @test_sitofp_i64_f64_0() : () -> ()
    call @test_sitofp_i64_f64_1() : () -> ()
    call @test_sitofp_i64_f64_2() : () -> ()
    call @test_sitofp_i64_f64_3() : () -> ()
    call @test_uitofp_i64_f64_0() : () -> ()
    call @test_uitofp_i64_f64_1() : () -> ()
    call @test_uitofp_i64_f64_2() : () -> ()
    call @test_sitofp_i4_f64_0() : () -> ()
    call @test_sitofp_i4_f64_1() : () -> ()
    call @test_sitofp_i4_f64_2() : () -> ()
    call @test_sitofp_i4_f64_3() : () -> ()
    call @test_uitofp_i4_f64_0() : () -> ()
    call @test_uitofp_i4_f64_1() : () -> ()
    call @test_uitofp_i4_f64_2() : () -> ()
    call @test_sitofp_i8_f32_0() : () -> ()
    call @test_sitofp_i8_f32_1() : () -> ()
    call @test_sitofp_i8_f32_2() : () -> ()
    call @test_sitofp_i8_f32_3() : () -> ()
    call @test_uitofp_i8_f32_0() : () -> ()
    call @test_uitofp_i8_f32_1() : () -> ()
    call @test_uitofp_i8_f32_2() : () -> ()
    call @test_sitofp_i16_f32_0() : () -> ()
    call @test_sitofp_i16_f32_1() : () -> ()
    call @test_sitofp_i16_f32_2() : () -> ()
    call @test_sitofp_i16_f32_3() : () -> ()
    call @test_uitofp_i16_f32_0() : () -> ()
    call @test_uitofp_i16_f32_1() : () -> ()
    call @test_uitofp_i16_f32_2() : () -> ()
    call @test_sitofp_i32_f32_0() : () -> ()
    call @test_sitofp_i32_f32_1() : () -> ()
    call @test_sitofp_i32_f32_2() : () -> ()
    call @test_sitofp_i32_f32_3() : () -> ()
    call @test_uitofp_i32_f32_0() : () -> ()
    call @test_uitofp_i32_f32_1() : () -> ()
    call @test_uitofp_i32_f32_2() : () -> ()
    call @test_sitofp_i64_f32_0() : () -> ()
    call @test_sitofp_i64_f32_1() : () -> ()
    call @test_sitofp_i64_f32_2() : () -> ()
    call @test_sitofp_i64_f32_3() : () -> ()
    call @test_uitofp_i64_f32_0() : () -> ()
    call @test_uitofp_i64_f32_1() : () -> ()
    call @test_uitofp_i64_f32_2() : () -> ()
    call @test_sitofp_i4_f32_0() : () -> ()
    call @test_sitofp_i4_f32_1() : () -> ()
    call @test_sitofp_i4_f32_2() : () -> ()
    call @test_sitofp_i4_f32_3() : () -> ()
    call @test_uitofp_i4_f32_0() : () -> ()
    call @test_uitofp_i4_f32_1() : () -> ()
    call @test_uitofp_i4_f32_2() : () -> ()
    call @test_sitofp_i8_f16_0() : () -> ()
    call @test_sitofp_i8_f16_1() : () -> ()
    call @test_sitofp_i8_f16_2() : () -> ()
    call @test_sitofp_i8_f16_3() : () -> ()
    call @test_uitofp_i8_f16_0() : () -> ()
    call @test_uitofp_i8_f16_1() : () -> ()
    call @test_uitofp_i8_f16_2() : () -> ()
    call @test_sitofp_i16_f16_0() : () -> ()
    call @test_sitofp_i16_f16_1() : () -> ()
    call @test_sitofp_i16_f16_2() : () -> ()
    call @test_sitofp_i16_f16_3() : () -> ()
    call @test_uitofp_i16_f16_0() : () -> ()
    call @test_uitofp_i16_f16_1() : () -> ()
    call @test_uitofp_i16_f16_2() : () -> ()
    call @test_sitofp_i32_f16_0() : () -> ()
    call @test_sitofp_i32_f16_1() : () -> ()
    call @test_sitofp_i32_f16_2() : () -> ()
    call @test_sitofp_i32_f16_3() : () -> ()
    call @test_uitofp_i32_f16_0() : () -> ()
    call @test_uitofp_i32_f16_1() : () -> ()
    call @test_uitofp_i32_f16_2() : () -> ()
    call @test_sitofp_i64_f16_0() : () -> ()
    call @test_sitofp_i64_f16_1() : () -> ()
    call @test_sitofp_i64_f16_2() : () -> ()
    call @test_sitofp_i64_f16_3() : () -> ()
    call @test_uitofp_i64_f16_0() : () -> ()
    call @test_uitofp_i64_f16_1() : () -> ()
    call @test_uitofp_i64_f16_2() : () -> ()
    call @test_sitofp_i4_f16_0() : () -> ()
    call @test_sitofp_i4_f16_1() : () -> ()
    call @test_sitofp_i4_f16_2() : () -> ()
    call @test_sitofp_i4_f16_3() : () -> ()
    call @test_uitofp_i4_f16_0() : () -> ()
    call @test_uitofp_i4_f16_1() : () -> ()
    call @test_uitofp_i4_f16_2() : () -> ()
    call @test_sitofp_i8_bf16_0() : () -> ()
    call @test_sitofp_i8_bf16_1() : () -> ()
    call @test_sitofp_i8_bf16_2() : () -> ()
    call @test_sitofp_i8_bf16_3() : () -> ()
    call @test_uitofp_i8_bf16_0() : () -> ()
    call @test_uitofp_i8_bf16_1() : () -> ()
    call @test_uitofp_i8_bf16_2() : () -> ()
    call @test_sitofp_i16_bf16_0() : () -> ()
    call @test_sitofp_i16_bf16_1() : () -> ()
    call @test_sitofp_i16_bf16_2() : () -> ()
    call @test_sitofp_i16_bf16_3() : () -> ()
    call @test_uitofp_i16_bf16_0() : () -> ()
    call @test_uitofp_i16_bf16_1() : () -> ()
    call @test_uitofp_i16_bf16_2() : () -> ()
    call @test_sitofp_i32_bf16_0() : () -> ()
    call @test_sitofp_i32_bf16_1() : () -> ()
    call @test_sitofp_i32_bf16_2() : () -> ()
    call @test_sitofp_i32_bf16_3() : () -> ()
    call @test_uitofp_i32_bf16_0() : () -> ()
    call @test_uitofp_i32_bf16_1() : () -> ()
    call @test_uitofp_i32_bf16_2() : () -> ()
    call @test_sitofp_i64_bf16_0() : () -> ()
    call @test_sitofp_i64_bf16_1() : () -> ()
    call @test_sitofp_i64_bf16_2() : () -> ()
    call @test_sitofp_i64_bf16_3() : () -> ()
    call @test_uitofp_i64_bf16_0() : () -> ()
    call @test_uitofp_i64_bf16_1() : () -> ()
    call @test_uitofp_i64_bf16_2() : () -> ()
    call @test_sitofp_i4_bf16_0() : () -> ()
    call @test_sitofp_i4_bf16_1() : () -> ()
    call @test_sitofp_i4_bf16_2() : () -> ()
    call @test_sitofp_i4_bf16_3() : () -> ()
    call @test_uitofp_i4_bf16_0() : () -> ()
    call @test_uitofp_i4_bf16_1() : () -> ()
    call @test_uitofp_i4_bf16_2() : () -> ()
    call @test_sitofp_i8_f8E4M3FN_0() : () -> ()
    call @test_sitofp_i8_f8E4M3FN_1() : () -> ()
    call @test_sitofp_i8_f8E4M3FN_2() : () -> ()
    call @test_sitofp_i8_f8E4M3FN_3() : () -> ()
    call @test_uitofp_i8_f8E4M3FN_0() : () -> ()
    call @test_uitofp_i8_f8E4M3FN_1() : () -> ()
    call @test_uitofp_i8_f8E4M3FN_2() : () -> ()
    call @test_sitofp_i16_f8E4M3FN_0() : () -> ()
    call @test_sitofp_i16_f8E4M3FN_1() : () -> ()
    call @test_sitofp_i16_f8E4M3FN_2() : () -> ()
    call @test_sitofp_i16_f8E4M3FN_3() : () -> ()
    call @test_uitofp_i16_f8E4M3FN_0() : () -> ()
    call @test_uitofp_i16_f8E4M3FN_1() : () -> ()
    call @test_uitofp_i16_f8E4M3FN_2() : () -> ()
    call @test_sitofp_i32_f8E4M3FN_0() : () -> ()
    call @test_sitofp_i32_f8E4M3FN_1() : () -> ()
    call @test_sitofp_i32_f8E4M3FN_2() : () -> ()
    call @test_sitofp_i32_f8E4M3FN_3() : () -> ()
    call @test_uitofp_i32_f8E4M3FN_0() : () -> ()
    call @test_uitofp_i32_f8E4M3FN_1() : () -> ()
    call @test_uitofp_i32_f8E4M3FN_2() : () -> ()
    call @test_sitofp_i64_f8E4M3FN_0() : () -> ()
    call @test_sitofp_i64_f8E4M3FN_1() : () -> ()
    call @test_sitofp_i64_f8E4M3FN_2() : () -> ()
    call @test_sitofp_i64_f8E4M3FN_3() : () -> ()
    call @test_uitofp_i64_f8E4M3FN_0() : () -> ()
    call @test_uitofp_i64_f8E4M3FN_1() : () -> ()
    call @test_uitofp_i64_f8E4M3FN_2() : () -> ()
    call @test_sitofp_i4_f8E4M3FN_0() : () -> ()
    call @test_sitofp_i4_f8E4M3FN_1() : () -> ()
    call @test_sitofp_i4_f8E4M3FN_2() : () -> ()
    call @test_sitofp_i4_f8E4M3FN_3() : () -> ()
    call @test_uitofp_i4_f8E4M3FN_0() : () -> ()
    call @test_uitofp_i4_f8E4M3FN_1() : () -> ()
    call @test_uitofp_i4_f8E4M3FN_2() : () -> ()
    %c0 = executor.constant 0 : i32
    return %c0 : i32
  }
}
