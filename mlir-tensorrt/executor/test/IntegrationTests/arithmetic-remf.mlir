// RUN: executor-opt -executor-lower-to-runtime-builtins %s | \
// RUN: executor-translate -mlir-to-lua | \
// RUN: executor-runner -input-type=lua

//===----------------------------------------------------------------------===//
//  Auto-generated tests for arith.remf
//  Generated by generate_remf_tests.py
//===----------------------------------------------------------------------===//

module {
  func.func private @eq_or_both_nan_f64(%x: f64, %y: f64) -> i1 {
    %cst0 = executor.constant 0.0 : f64
    %x_isnan = executor.fcmp <uno> %x, %cst0 : f64
    %y_isnan = executor.fcmp <uno> %y, %cst0 : f64
    %result0 = executor.bitwise_andi %x_isnan, %y_isnan : i1
    %x_oeq_y = executor.fcmp <oeq> %x, %y : f64
    %result1 = executor.bitwise_ori %result0, %x_oeq_y : i1
    return %result1 : i1
  }

  func.func private @remf_f64(%x: f64, %y: f64, %expected: f64) -> () attributes {no_inline} {
    %r = executor.remf %x, %y : f64
    executor.print "%f remf_f64 %f = %f (expected: %f)"(%x, %y, %r, %expected : f64, f64, f64, f64)
    %eq_or_both_nan = call @eq_or_both_nan_f64(%r, %expected) : (f64, f64) -> i1
    executor.assert %eq_or_both_nan, "remf f64 failed"
    return
  }

  func.func private @eq_or_both_nan_f32(%x: f32, %y: f32) -> i1 {
    %cst0 = executor.constant 0.0 : f32
    %x_isnan = executor.fcmp <uno> %x, %cst0 : f32
    %y_isnan = executor.fcmp <uno> %y, %cst0 : f32
    %result0 = executor.bitwise_andi %x_isnan, %y_isnan : i1
    %x_oeq_y = executor.fcmp <oeq> %x, %y : f32
    %result1 = executor.bitwise_ori %result0, %x_oeq_y : i1
    return %result1 : i1
  }

  func.func private @remf_f32(%x: f32, %y: f32, %expected: f32) -> () attributes {no_inline} {
    %r = executor.remf %x, %y : f32
    executor.print "%f remf_f32 %f = %f (expected: %f)"(%x, %y, %r, %expected : f32, f32, f32, f32)
    %eq_or_both_nan = call @eq_or_both_nan_f32(%r, %expected) : (f32, f32) -> i1
    executor.assert %eq_or_both_nan, "remf f32 failed"
    return
  }

  func.func private @eq_or_both_nan_f16(%x: f16, %y: f16) -> i1 {
    %cst0 = executor.constant 0.0 : f16
    %x_isnan = executor.fcmp <uno> %x, %cst0 : f16
    %y_isnan = executor.fcmp <uno> %y, %cst0 : f16
    %result0 = executor.bitwise_andi %x_isnan, %y_isnan : i1
    %x_oeq_y = executor.fcmp <oeq> %x, %y : f16
    %result1 = executor.bitwise_ori %result0, %x_oeq_y : i1
    return %result1 : i1
  }

  func.func private @remf_f16(%x: f16, %y: f16, %expected: f16) -> () attributes {no_inline} {
    %r = executor.remf %x, %y : f16
    %x_f32 = executor.extf %x : f16 to f32
    %y_f32 = executor.extf %y : f16 to f32
    %r_f32 = executor.extf %r : f16 to f32
    %expected_f32 = executor.extf %expected : f16 to f32
    executor.print "%f remf_f16 %f = %f (expected: %f)"(%x_f32, %y_f32, %r_f32, %expected_f32 : f32, f32, f32, f32)
    %eq_or_both_nan = call @eq_or_both_nan_f16(%r, %expected) : (f16, f16) -> i1
    executor.assert %eq_or_both_nan, "remf f16 failed"
    return
  }

  func.func private @eq_or_both_nan_bf16(%x: bf16, %y: bf16) -> i1 {
    %cst0 = executor.constant 0.0 : bf16
    %x_isnan = executor.fcmp <uno> %x, %cst0 : bf16
    %y_isnan = executor.fcmp <uno> %y, %cst0 : bf16
    %result0 = executor.bitwise_andi %x_isnan, %y_isnan : i1
    %x_oeq_y = executor.fcmp <oeq> %x, %y : bf16
    %result1 = executor.bitwise_ori %result0, %x_oeq_y : i1
    return %result1 : i1
  }

  func.func private @remf_bf16(%x: bf16, %y: bf16, %expected: bf16) -> () attributes {no_inline} {
    %r = executor.remf %x, %y : bf16
    %x_f32 = executor.extf %x : bf16 to f32
    %y_f32 = executor.extf %y : bf16 to f32
    %r_f32 = executor.extf %r : bf16 to f32
    %expected_f32 = executor.extf %expected : bf16 to f32
    executor.print "%f remf_bf16 %f = %f (expected: %f)"(%x_f32, %y_f32, %r_f32, %expected_f32 : f32, f32, f32, f32)
    %eq_or_both_nan = call @eq_or_both_nan_bf16(%r, %expected) : (bf16, bf16) -> i1
    executor.assert %eq_or_both_nan, "remf bf16 failed"
    return
  }

  func.func private @eq_or_both_nan_f8E4M3FN(%x: f8E4M3FN, %y: f8E4M3FN) -> i1 {
    %cst0 = executor.constant 0.0 : f8E4M3FN
    %x_isnan = executor.fcmp <uno> %x, %cst0 : f8E4M3FN
    %y_isnan = executor.fcmp <uno> %y, %cst0 : f8E4M3FN
    %result0 = executor.bitwise_andi %x_isnan, %y_isnan : i1
    %x_oeq_y = executor.fcmp <oeq> %x, %y : f8E4M3FN
    %result1 = executor.bitwise_ori %result0, %x_oeq_y : i1
    return %result1 : i1
  }

  func.func private @remf_f8E4M3FN(%x: f8E4M3FN, %y: f8E4M3FN, %expected: f8E4M3FN) -> () attributes {no_inline} {
    %r = executor.remf %x, %y : f8E4M3FN
    %x_f32 = executor.extf %x : f8E4M3FN to f32
    %y_f32 = executor.extf %y : f8E4M3FN to f32
    %r_f32 = executor.extf %r : f8E4M3FN to f32
    %expected_f32 = executor.extf %expected : f8E4M3FN to f32
    executor.print "%f remf_f8E4M3FN %f = %f (expected: %f)"(%x_f32, %y_f32, %r_f32, %expected_f32 : f32, f32, f32, f32)
    %eq_or_both_nan = call @eq_or_both_nan_f8E4M3FN(%r, %expected) : (f8E4M3FN, f8E4M3FN) -> i1
    executor.assert %eq_or_both_nan, "remf f8E4M3FN failed"
    return
  }

  // ---- Element type: f64 ----
  func.func @remf_case01_f64() attributes {no_inline} {
    executor.print "test @remf_case01_f64"()
    %c0 = executor.constant 5.5 : f64
    %c1 = executor.constant 2.0 : f64
    %expected = executor.constant 1.5 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case02_f64() attributes {no_inline} {
    executor.print "test @remf_case02_f64"()
    %c0 = executor.constant -5.5 : f64
    %c1 = executor.constant 2.0 : f64
    %expected = executor.constant -1.5 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case03_f64() attributes {no_inline} {
    executor.print "test @remf_case03_f64"()
    %c0 = executor.constant 5.5 : f64
    %c1 = executor.constant -2.0 : f64
    %expected = executor.constant 1.5 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case04_f64() attributes {no_inline} {
    executor.print "test @remf_case04_f64"()
    %c0 = executor.constant -5.5 : f64
    %c1 = executor.constant -2.0 : f64
    %expected = executor.constant -1.5 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case05_f64() attributes {no_inline} {
    executor.print "test @remf_case05_f64"()
    %c0 = executor.constant 6.0 : f64
    %c1 = executor.constant 2.0 : f64
    %expected = executor.constant 0.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case06_f64() attributes {no_inline} {
    executor.print "test @remf_case06_f64"()
    %c0 = executor.constant -6.0 : f64
    %c1 = executor.constant 2.0 : f64
    %expected = executor.constant -0.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case07_f64() attributes {no_inline} {
    executor.print "test @remf_case07_f64"()
    %c0 = executor.constant 1.0 : f64
    %c1 = executor.constant 2.5 : f64
    %expected = executor.constant 1.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case08_f64() attributes {no_inline} {
    executor.print "test @remf_case08_f64"()
    %c0 = executor.constant 7.0 : f64
    %c1 = executor.constant 0.5 : f64
    %expected = executor.constant 0.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case09_f64() attributes {no_inline} {
    executor.print "test @remf_case09_f64"()
    %c0 = executor.constant 0x7fefffffffffffff : f64
    %c1 = executor.constant 3.0 : f64
    %expected = executor.constant 2.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case10_f64() attributes {no_inline} {
    executor.print "test @remf_case10_f64"()
    %c0 = executor.constant 0x0000000000000001 : f64
    %c1 = executor.constant 0x0000000000000001 : f64
    %expected = executor.constant 0.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case11_f64() attributes {no_inline} {
    executor.print "test @remf_case11_f64"()
    %c0 = executor.constant 0x7fefffffffffffff : f64
    %c1 = executor.constant -2.0 : f64
    %expected = executor.constant 0.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case12_f64() attributes {no_inline} {
    executor.print "test @remf_case12_f64"()
    %c0 = executor.constant 0x7ff8000000000000 : f64
    %c1 = executor.constant 1.0 : f64
    %expected = executor.constant 0x7ff8000000000000 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case13_f64() attributes {no_inline} {
    executor.print "test @remf_case13_f64"()
    %c0 = executor.constant 1.0 : f64
    %c1 = executor.constant 0x7ff8000000000000 : f64
    %expected = executor.constant 0x7ff8000000000000 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case14_f64() attributes {no_inline} {
    executor.print "test @remf_case14_f64"()
    %c0 = executor.constant 0x7ff0000000000000 : f64
    %c1 = executor.constant 3.0 : f64
    %expected = executor.constant 0x7ff8000000000000 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case15_f64() attributes {no_inline} {
    executor.print "test @remf_case15_f64"()
    %c0 = executor.constant 5.0 : f64
    %c1 = executor.constant 0x7ff0000000000000 : f64
    %expected = executor.constant 5.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case16_f64() attributes {no_inline} {
    executor.print "test @remf_case16_f64"()
    %c0 = executor.constant 1.0 : f64
    %c1 = executor.constant 0.0 : f64
    %expected = executor.constant 0x7ff8000000000000 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case17_f64() attributes {no_inline} {
    executor.print "test @remf_case17_f64"()
    %c0 = executor.constant 1.0 : f64
    %c1 = executor.constant -0.0 : f64
    %expected = executor.constant 0x7ff8000000000000 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case18_f64() attributes {no_inline} {
    executor.print "test @remf_case18_f64"()
    %c0 = executor.constant -0.0 : f64
    %c1 = executor.constant 1.0 : f64
    %expected = executor.constant -0.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  func.func @remf_case19_f64() attributes {no_inline} {
    executor.print "test @remf_case19_f64"()
    %c0 = executor.constant 0xffefffffffffffff : f64
    %c1 = executor.constant 2.0 : f64
    %expected = executor.constant -0.0 : f64
    call @remf_f64(%c0, %c1, %expected) : (f64, f64, f64) -> ()
    return
  }

  // ---- Element type: f32 ----
  func.func @remf_case01_f32() attributes {no_inline} {
    executor.print "test @remf_case01_f32"()
    %c0 = executor.constant 5.5 : f32
    %c1 = executor.constant 2.0 : f32
    %expected = executor.constant 1.5 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case02_f32() attributes {no_inline} {
    executor.print "test @remf_case02_f32"()
    %c0 = executor.constant -5.5 : f32
    %c1 = executor.constant 2.0 : f32
    %expected = executor.constant -1.5 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case03_f32() attributes {no_inline} {
    executor.print "test @remf_case03_f32"()
    %c0 = executor.constant 5.5 : f32
    %c1 = executor.constant -2.0 : f32
    %expected = executor.constant 1.5 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case04_f32() attributes {no_inline} {
    executor.print "test @remf_case04_f32"()
    %c0 = executor.constant -5.5 : f32
    %c1 = executor.constant -2.0 : f32
    %expected = executor.constant -1.5 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case05_f32() attributes {no_inline} {
    executor.print "test @remf_case05_f32"()
    %c0 = executor.constant 6.0 : f32
    %c1 = executor.constant 2.0 : f32
    %expected = executor.constant 0.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case06_f32() attributes {no_inline} {
    executor.print "test @remf_case06_f32"()
    %c0 = executor.constant -6.0 : f32
    %c1 = executor.constant 2.0 : f32
    %expected = executor.constant -0.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case07_f32() attributes {no_inline} {
    executor.print "test @remf_case07_f32"()
    %c0 = executor.constant 1.0 : f32
    %c1 = executor.constant 2.5 : f32
    %expected = executor.constant 1.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case08_f32() attributes {no_inline} {
    executor.print "test @remf_case08_f32"()
    %c0 = executor.constant 7.0 : f32
    %c1 = executor.constant 0.5 : f32
    %expected = executor.constant 0.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case09_f32() attributes {no_inline} {
    executor.print "test @remf_case09_f32"()
    %c0 = executor.constant 0x7f7fffff : f32
    %c1 = executor.constant 3.0 : f32
    %expected = executor.constant 0.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case10_f32() attributes {no_inline} {
    executor.print "test @remf_case10_f32"()
    %c0 = executor.constant 0x00000001 : f32
    %c1 = executor.constant 0x00000001 : f32
    %expected = executor.constant 0.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case11_f32() attributes {no_inline} {
    executor.print "test @remf_case11_f32"()
    %c0 = executor.constant 0x7f7fffff : f32
    %c1 = executor.constant -2.0 : f32
    %expected = executor.constant 0.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case12_f32() attributes {no_inline} {
    executor.print "test @remf_case12_f32"()
    %c0 = executor.constant 0x7fc00000 : f32
    %c1 = executor.constant 1.0 : f32
    %expected = executor.constant 0x7fc00000 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case13_f32() attributes {no_inline} {
    executor.print "test @remf_case13_f32"()
    %c0 = executor.constant 1.0 : f32
    %c1 = executor.constant 0x7fc00000 : f32
    %expected = executor.constant 0x7fc00000 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case14_f32() attributes {no_inline} {
    executor.print "test @remf_case14_f32"()
    %c0 = executor.constant 0x7f800000 : f32
    %c1 = executor.constant 3.0 : f32
    %expected = executor.constant 0x7fc00000 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case15_f32() attributes {no_inline} {
    executor.print "test @remf_case15_f32"()
    %c0 = executor.constant 5.0 : f32
    %c1 = executor.constant 0x7f800000 : f32
    %expected = executor.constant 5.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case16_f32() attributes {no_inline} {
    executor.print "test @remf_case16_f32"()
    %c0 = executor.constant 1.0 : f32
    %c1 = executor.constant 0.0 : f32
    %expected = executor.constant 0x7fc00000 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case17_f32() attributes {no_inline} {
    executor.print "test @remf_case17_f32"()
    %c0 = executor.constant 1.0 : f32
    %c1 = executor.constant -0.0 : f32
    %expected = executor.constant 0x7fc00000 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case18_f32() attributes {no_inline} {
    executor.print "test @remf_case18_f32"()
    %c0 = executor.constant -0.0 : f32
    %c1 = executor.constant 1.0 : f32
    %expected = executor.constant -0.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  func.func @remf_case19_f32() attributes {no_inline} {
    executor.print "test @remf_case19_f32"()
    %c0 = executor.constant 0xff7fffff : f32
    %c1 = executor.constant 2.0 : f32
    %expected = executor.constant -0.0 : f32
    call @remf_f32(%c0, %c1, %expected) : (f32, f32, f32) -> ()
    return
  }

  // ---- Element type: f16 ----
  func.func @remf_case01_f16() attributes {no_inline} {
    executor.print "test @remf_case01_f16"()
    %c0 = executor.constant 5.5 : f16
    %c1 = executor.constant 2.0 : f16
    %expected = executor.constant 1.5 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case02_f16() attributes {no_inline} {
    executor.print "test @remf_case02_f16"()
    %c0 = executor.constant -5.5 : f16
    %c1 = executor.constant 2.0 : f16
    %expected = executor.constant -1.5 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case03_f16() attributes {no_inline} {
    executor.print "test @remf_case03_f16"()
    %c0 = executor.constant 5.5 : f16
    %c1 = executor.constant -2.0 : f16
    %expected = executor.constant 1.5 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case04_f16() attributes {no_inline} {
    executor.print "test @remf_case04_f16"()
    %c0 = executor.constant -5.5 : f16
    %c1 = executor.constant -2.0 : f16
    %expected = executor.constant -1.5 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case05_f16() attributes {no_inline} {
    executor.print "test @remf_case05_f16"()
    %c0 = executor.constant 6.0 : f16
    %c1 = executor.constant 2.0 : f16
    %expected = executor.constant 0.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case06_f16() attributes {no_inline} {
    executor.print "test @remf_case06_f16"()
    %c0 = executor.constant -6.0 : f16
    %c1 = executor.constant 2.0 : f16
    %expected = executor.constant -0.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case07_f16() attributes {no_inline} {
    executor.print "test @remf_case07_f16"()
    %c0 = executor.constant 1.0 : f16
    %c1 = executor.constant 2.5 : f16
    %expected = executor.constant 1.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case08_f16() attributes {no_inline} {
    executor.print "test @remf_case08_f16"()
    %c0 = executor.constant 7.0 : f16
    %c1 = executor.constant 0.5 : f16
    %expected = executor.constant 0.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case09_f16() attributes {no_inline} {
    executor.print "test @remf_case09_f16"()
    %c0 = executor.constant 0x7bff : f16
    %c1 = executor.constant 3.0 : f16
    %expected = executor.constant 2.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case10_f16() attributes {no_inline} {
    executor.print "test @remf_case10_f16"()
    %c0 = executor.constant 0x0001 : f16
    %c1 = executor.constant 0x0001 : f16
    %expected = executor.constant 0.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case11_f16() attributes {no_inline} {
    executor.print "test @remf_case11_f16"()
    %c0 = executor.constant 0x7bff : f16
    %c1 = executor.constant -2.0 : f16
    %expected = executor.constant 0.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case12_f16() attributes {no_inline} {
    executor.print "test @remf_case12_f16"()
    %c0 = executor.constant 0x7e00 : f16
    %c1 = executor.constant 1.0 : f16
    %expected = executor.constant 0x7e00 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case13_f16() attributes {no_inline} {
    executor.print "test @remf_case13_f16"()
    %c0 = executor.constant 1.0 : f16
    %c1 = executor.constant 0x7e00 : f16
    %expected = executor.constant 0x7e00 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case14_f16() attributes {no_inline} {
    executor.print "test @remf_case14_f16"()
    %c0 = executor.constant 0x7c00 : f16
    %c1 = executor.constant 3.0 : f16
    %expected = executor.constant 0x7e00 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case15_f16() attributes {no_inline} {
    executor.print "test @remf_case15_f16"()
    %c0 = executor.constant 5.0 : f16
    %c1 = executor.constant 0x7c00 : f16
    %expected = executor.constant 5.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case16_f16() attributes {no_inline} {
    executor.print "test @remf_case16_f16"()
    %c0 = executor.constant 1.0 : f16
    %c1 = executor.constant 0.0 : f16
    %expected = executor.constant 0x7e00 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case17_f16() attributes {no_inline} {
    executor.print "test @remf_case17_f16"()
    %c0 = executor.constant 1.0 : f16
    %c1 = executor.constant -0.0 : f16
    %expected = executor.constant 0x7e00 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case18_f16() attributes {no_inline} {
    executor.print "test @remf_case18_f16"()
    %c0 = executor.constant -0.0 : f16
    %c1 = executor.constant 1.0 : f16
    %expected = executor.constant -0.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  func.func @remf_case19_f16() attributes {no_inline} {
    executor.print "test @remf_case19_f16"()
    %c0 = executor.constant 0xfbff : f16
    %c1 = executor.constant 2.0 : f16
    %expected = executor.constant -0.0 : f16
    call @remf_f16(%c0, %c1, %expected) : (f16, f16, f16) -> ()
    return
  }

  // ---- Element type: bf16 ----
  func.func @remf_case01_bf16() attributes {no_inline} {
    executor.print "test @remf_case01_bf16"()
    %c0 = executor.constant 5.5 : bf16
    %c1 = executor.constant 2.0 : bf16
    %expected = executor.constant 1.5 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case02_bf16() attributes {no_inline} {
    executor.print "test @remf_case02_bf16"()
    %c0 = executor.constant -5.5 : bf16
    %c1 = executor.constant 2.0 : bf16
    %expected = executor.constant -1.5 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case03_bf16() attributes {no_inline} {
    executor.print "test @remf_case03_bf16"()
    %c0 = executor.constant 5.5 : bf16
    %c1 = executor.constant -2.0 : bf16
    %expected = executor.constant 1.5 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case04_bf16() attributes {no_inline} {
    executor.print "test @remf_case04_bf16"()
    %c0 = executor.constant -5.5 : bf16
    %c1 = executor.constant -2.0 : bf16
    %expected = executor.constant -1.5 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case05_bf16() attributes {no_inline} {
    executor.print "test @remf_case05_bf16"()
    %c0 = executor.constant 6.0 : bf16
    %c1 = executor.constant 2.0 : bf16
    %expected = executor.constant 0.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case06_bf16() attributes {no_inline} {
    executor.print "test @remf_case06_bf16"()
    %c0 = executor.constant -6.0 : bf16
    %c1 = executor.constant 2.0 : bf16
    %expected = executor.constant -0.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case07_bf16() attributes {no_inline} {
    executor.print "test @remf_case07_bf16"()
    %c0 = executor.constant 1.0 : bf16
    %c1 = executor.constant 2.5 : bf16
    %expected = executor.constant 1.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case08_bf16() attributes {no_inline} {
    executor.print "test @remf_case08_bf16"()
    %c0 = executor.constant 7.0 : bf16
    %c1 = executor.constant 0.5 : bf16
    %expected = executor.constant 0.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case09_bf16() attributes {no_inline} {
    executor.print "test @remf_case09_bf16"()
    %c0 = executor.constant 0x7f7f : bf16
    %c1 = executor.constant 3.0 : bf16
    %expected = executor.constant 0.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case10_bf16() attributes {no_inline} {
    executor.print "test @remf_case10_bf16"()
    %c0 = executor.constant 0x0001 : bf16
    %c1 = executor.constant 0x0001 : bf16
    %expected = executor.constant 0.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case11_bf16() attributes {no_inline} {
    executor.print "test @remf_case11_bf16"()
    %c0 = executor.constant 0x7f7f : bf16
    %c1 = executor.constant -2.0 : bf16
    %expected = executor.constant 0.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case12_bf16() attributes {no_inline} {
    executor.print "test @remf_case12_bf16"()
    %c0 = executor.constant 0x7fc0 : bf16
    %c1 = executor.constant 1.0 : bf16
    %expected = executor.constant 0x7fc0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case13_bf16() attributes {no_inline} {
    executor.print "test @remf_case13_bf16"()
    %c0 = executor.constant 1.0 : bf16
    %c1 = executor.constant 0x7fc0 : bf16
    %expected = executor.constant 0x7fc0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case14_bf16() attributes {no_inline} {
    executor.print "test @remf_case14_bf16"()
    %c0 = executor.constant 0x7f80 : bf16
    %c1 = executor.constant 3.0 : bf16
    %expected = executor.constant 0x7fc0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case15_bf16() attributes {no_inline} {
    executor.print "test @remf_case15_bf16"()
    %c0 = executor.constant 5.0 : bf16
    %c1 = executor.constant 0x7f80 : bf16
    %expected = executor.constant 5.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case16_bf16() attributes {no_inline} {
    executor.print "test @remf_case16_bf16"()
    %c0 = executor.constant 1.0 : bf16
    %c1 = executor.constant 0.0 : bf16
    %expected = executor.constant 0x7fc0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case17_bf16() attributes {no_inline} {
    executor.print "test @remf_case17_bf16"()
    %c0 = executor.constant 1.0 : bf16
    %c1 = executor.constant -0.0 : bf16
    %expected = executor.constant 0x7fc0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case18_bf16() attributes {no_inline} {
    executor.print "test @remf_case18_bf16"()
    %c0 = executor.constant -0.0 : bf16
    %c1 = executor.constant 1.0 : bf16
    %expected = executor.constant -0.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  func.func @remf_case19_bf16() attributes {no_inline} {
    executor.print "test @remf_case19_bf16"()
    %c0 = executor.constant 0xff7f : bf16
    %c1 = executor.constant 2.0 : bf16
    %expected = executor.constant -0.0 : bf16
    call @remf_bf16(%c0, %c1, %expected) : (bf16, bf16, bf16) -> ()
    return
  }

  // ---- Element type: f8E4M3FN ----
  func.func @remf_case01_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case01_f8E4M3FN"()
    %c0 = executor.constant 5.5 : f8E4M3FN
    %c1 = executor.constant 2.0 : f8E4M3FN
    %expected = executor.constant 1.5 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case02_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case02_f8E4M3FN"()
    %c0 = executor.constant -5.5 : f8E4M3FN
    %c1 = executor.constant 2.0 : f8E4M3FN
    %expected = executor.constant -1.5 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case03_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case03_f8E4M3FN"()
    %c0 = executor.constant 5.5 : f8E4M3FN
    %c1 = executor.constant -2.0 : f8E4M3FN
    %expected = executor.constant 1.5 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case04_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case04_f8E4M3FN"()
    %c0 = executor.constant -5.5 : f8E4M3FN
    %c1 = executor.constant -2.0 : f8E4M3FN
    %expected = executor.constant -1.5 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case05_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case05_f8E4M3FN"()
    %c0 = executor.constant 6.0 : f8E4M3FN
    %c1 = executor.constant 2.0 : f8E4M3FN
    %expected = executor.constant 0.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case06_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case06_f8E4M3FN"()
    %c0 = executor.constant -6.0 : f8E4M3FN
    %c1 = executor.constant 2.0 : f8E4M3FN
    %expected = executor.constant -0.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case07_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case07_f8E4M3FN"()
    %c0 = executor.constant 1.0 : f8E4M3FN
    %c1 = executor.constant 2.5 : f8E4M3FN
    %expected = executor.constant 1.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case08_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case08_f8E4M3FN"()
    %c0 = executor.constant 7.0 : f8E4M3FN
    %c1 = executor.constant 0.5 : f8E4M3FN
    %expected = executor.constant 0.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case09_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case09_f8E4M3FN"()
    %c0 = executor.constant 448. : f8E4M3FN
    %c1 = executor.constant 3.0 : f8E4M3FN
    %expected = executor.constant 1.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case10_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case10_f8E4M3FN"()
    %c0 = executor.constant 0x01 : f8E4M3FN
    %c1 = executor.constant 0x01 : f8E4M3FN
    %expected = executor.constant 0.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case11_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case11_f8E4M3FN"()
    %c0 = executor.constant 448. : f8E4M3FN
    %c1 = executor.constant -2.0 : f8E4M3FN
    %expected = executor.constant 0.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case12_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case12_f8E4M3FN"()
    %c0 = executor.constant 0x7f : f8E4M3FN
    %c1 = executor.constant 1.0 : f8E4M3FN
    %expected = executor.constant 0x7f : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case13_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case13_f8E4M3FN"()
    %c0 = executor.constant 1.0 : f8E4M3FN
    %c1 = executor.constant 0x7f : f8E4M3FN
    %expected = executor.constant 0x7f : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case14_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case14_f8E4M3FN"()
    %c0 = executor.constant 448. : f8E4M3FN
    %c1 = executor.constant 3.0 : f8E4M3FN
    %expected = executor.constant 1.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case15_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case15_f8E4M3FN"()
    %c0 = executor.constant 5.0 : f8E4M3FN
    %c1 = executor.constant 448. : f8E4M3FN
    %expected = executor.constant 5.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case16_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case16_f8E4M3FN"()
    %c0 = executor.constant 1.0 : f8E4M3FN
    %c1 = executor.constant 0.0 : f8E4M3FN
    %expected = executor.constant 0x7f : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case17_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case17_f8E4M3FN"()
    %c0 = executor.constant 1.0 : f8E4M3FN
    %c1 = executor.constant -0.0 : f8E4M3FN
    %expected = executor.constant 0x7f : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case18_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case18_f8E4M3FN"()
    %c0 = executor.constant -0.0 : f8E4M3FN
    %c1 = executor.constant 1.0 : f8E4M3FN
    %expected = executor.constant -0.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }

  func.func @remf_case19_f8E4M3FN() attributes {no_inline} {
    executor.print "test @remf_case19_f8E4M3FN"()
    %c0 = executor.constant -448. : f8E4M3FN
    %c1 = executor.constant 2.0 : f8E4M3FN
    %expected = executor.constant -0.0 : f8E4M3FN
    call @remf_f8E4M3FN(%c0, %c1, %expected) : (f8E4M3FN, f8E4M3FN, f8E4M3FN) -> ()
    return
  }


  // ---- Entrypoint ----
  func.func @main() -> i32{
    call @remf_case01_f64() : () -> ()
    call @remf_case02_f64() : () -> ()
    call @remf_case03_f64() : () -> ()
    call @remf_case04_f64() : () -> ()
    call @remf_case05_f64() : () -> ()
    call @remf_case06_f64() : () -> ()
    call @remf_case07_f64() : () -> ()
    call @remf_case08_f64() : () -> ()
    call @remf_case09_f64() : () -> ()
    call @remf_case10_f64() : () -> ()
    call @remf_case11_f64() : () -> ()
    call @remf_case12_f64() : () -> ()
    call @remf_case13_f64() : () -> ()
    call @remf_case14_f64() : () -> ()
    call @remf_case15_f64() : () -> ()
    call @remf_case16_f64() : () -> ()
    call @remf_case17_f64() : () -> ()
    call @remf_case18_f64() : () -> ()
    call @remf_case19_f64() : () -> ()
    call @remf_case01_f32() : () -> ()
    call @remf_case02_f32() : () -> ()
    call @remf_case03_f32() : () -> ()
    call @remf_case04_f32() : () -> ()
    call @remf_case05_f32() : () -> ()
    call @remf_case06_f32() : () -> ()
    call @remf_case07_f32() : () -> ()
    call @remf_case08_f32() : () -> ()
    call @remf_case09_f32() : () -> ()
    call @remf_case10_f32() : () -> ()
    call @remf_case11_f32() : () -> ()
    call @remf_case12_f32() : () -> ()
    call @remf_case13_f32() : () -> ()
    call @remf_case14_f32() : () -> ()
    call @remf_case15_f32() : () -> ()
    call @remf_case16_f32() : () -> ()
    call @remf_case17_f32() : () -> ()
    call @remf_case18_f32() : () -> ()
    call @remf_case19_f32() : () -> ()
    call @remf_case01_f16() : () -> ()
    call @remf_case02_f16() : () -> ()
    call @remf_case03_f16() : () -> ()
    call @remf_case04_f16() : () -> ()
    call @remf_case05_f16() : () -> ()
    call @remf_case06_f16() : () -> ()
    call @remf_case07_f16() : () -> ()
    call @remf_case08_f16() : () -> ()
    call @remf_case09_f16() : () -> ()
    call @remf_case10_f16() : () -> ()
    call @remf_case11_f16() : () -> ()
    call @remf_case12_f16() : () -> ()
    call @remf_case13_f16() : () -> ()
    call @remf_case14_f16() : () -> ()
    call @remf_case15_f16() : () -> ()
    call @remf_case16_f16() : () -> ()
    call @remf_case17_f16() : () -> ()
    call @remf_case18_f16() : () -> ()
    call @remf_case19_f16() : () -> ()
    call @remf_case01_bf16() : () -> ()
    call @remf_case02_bf16() : () -> ()
    call @remf_case03_bf16() : () -> ()
    call @remf_case04_bf16() : () -> ()
    call @remf_case05_bf16() : () -> ()
    call @remf_case06_bf16() : () -> ()
    call @remf_case07_bf16() : () -> ()
    call @remf_case08_bf16() : () -> ()
    call @remf_case09_bf16() : () -> ()
    call @remf_case10_bf16() : () -> ()
    call @remf_case11_bf16() : () -> ()
    call @remf_case12_bf16() : () -> ()
    call @remf_case13_bf16() : () -> ()
    call @remf_case14_bf16() : () -> ()
    call @remf_case15_bf16() : () -> ()
    call @remf_case16_bf16() : () -> ()
    call @remf_case17_bf16() : () -> ()
    call @remf_case18_bf16() : () -> ()
    call @remf_case19_bf16() : () -> ()
    call @remf_case01_f8E4M3FN() : () -> ()
    call @remf_case02_f8E4M3FN() : () -> ()
    call @remf_case03_f8E4M3FN() : () -> ()
    call @remf_case04_f8E4M3FN() : () -> ()
    call @remf_case05_f8E4M3FN() : () -> ()
    call @remf_case06_f8E4M3FN() : () -> ()
    call @remf_case07_f8E4M3FN() : () -> ()
    call @remf_case08_f8E4M3FN() : () -> ()
    call @remf_case09_f8E4M3FN() : () -> ()
    call @remf_case10_f8E4M3FN() : () -> ()
    call @remf_case11_f8E4M3FN() : () -> ()
    call @remf_case12_f8E4M3FN() : () -> ()
    call @remf_case13_f8E4M3FN() : () -> ()
    call @remf_case14_f8E4M3FN() : () -> ()
    call @remf_case15_f8E4M3FN() : () -> ()
    call @remf_case16_f8E4M3FN() : () -> ()
    call @remf_case17_f8E4M3FN() : () -> ()
    call @remf_case18_f8E4M3FN() : () -> ()
    call @remf_case19_f8E4M3FN() : () -> ()
    %c0 = executor.constant 0 : i32
    return %c0 : i32
  }
}
