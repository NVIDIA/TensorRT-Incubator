# Licensed under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
# Also available under a BSD-style license. See LICENSE.

load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@llvm-project//llvm:lit_test.bzl", "lit_test")
load("@pip_deps//:requirements.bzl", "requirement")
load("//:version.bzl", "MLIR_TENSORRT_VERSION")

expand_template(
    name = "lit_site_cfg_py",
    testonly = True,
    out = "lit.site.cfg.py",
    substitutions = {
        "@LIT_SITE_CFG_IN_HEADER@": "# Autogenerated, do not edit.",
        "\"@TENSORRT_MLIR_SOURCE_DIR@\"": "os.path.join(os.environ['TEST_SRCDIR'], 'tensorrt-mlir')",
        "\"@TENSORRT_MLIR_BINARY_DIR@\"": "os.path.join(os.environ['TEST_SRCDIR'], 'tensorrt-mlir')",
        "\"@LLVM_TOOLS_DIR@\"": "os.path.join(os.environ['TEST_SRCDIR'], 'llvm-project', 'llvm')",
        "\"@CMAKE_SOURCE_DIR@\"": "os.path.join(os.environ['TEST_SRCDIR'], 'tensorrt-mlir')",
        "\"@CMAKE_BINARY_DIR@\"": "os.path.join(os.environ['TEST_SRCDIR'], 'tensorrt-mlir')",
        "@MLIR_TRT_TENSORRT_VERSION@": "{}".format(MLIR_TENSORRT_VERSION),
        "@MLIR_TRT_ENABLE_PYTHON@": "False",
        "@MLIR_TRT_ENABLE_ASSERTIONS@": "True",
        "@MLIR_TRT_TARGET_CPP@": "False",
        "@MLIR_TRT_TARGET_LUA@": "False",
        "@MLIR_TRT_ENABLE_NCCL@": "False",
        "@MLIR_TRT_ENABLE_EXECUTOR@": "False",
        "@MLIR_TRT_ENABLE_HLO@": "False",
        "@MLIR_TRT_TARGET_TENSORRT@": "True",
        "@MLIR_TRT_WITH_ASAN@": "True",
        "@ENABLE_ASAN@": "True",
    },
    template = "lit.site.cfg.py.in",
)

# Common data used by most lit tests.
filegroup(
    name = "lit_data",
    testonly = True,
    data = [
        "gpu_tools.py",
        "lit.cfg.py",
        "lit.site.cfg.py",
        "@llvm-project//llvm:FileCheck",
        "@llvm-project//llvm:count",
        "@llvm-project//llvm:not",
    ],
)

[
    lit_test(
        name = "%s.test" % src,
        srcs = [src],
        data = [
            "//:mlir-tensorrt-opt",
            "//test:lit_data",
        ],
        tags = ["lit_tests"],
        deps = [
            requirement("nvidia-ml-py"),
            requirement("click"),
            requirement("numpy"),
        ],
    )
    for src in glob([
        "Dialect/**/*.mlir",
    ])
]

test_suite(
    name = "lit_tests",
    tags = ["lit_tests"],
)

test_suite(
    name = "all_tests",
    tests = [
        "//test:lit_tests",
    ],
)
