From 139c779d447d6163c51dbe9d8735b2062025f032 Mon Sep 17 00:00:00 2001
From: Christopher Bate <cbate@nvidia.com>
Date: Fri, 21 Mar 2025 03:28:26 +0000
Subject: [PATCH 5/7] Fix crash on ComplexType in PointwiseToLinalgMapConverter

---
 .../conversions/linalg/tests/pointwise.mlir   | 23 ++++++++++++++
 .../transforms/StablehloToLinalgPointwise.cpp | 30 +++++++++++++++----
 2 files changed, 48 insertions(+), 5 deletions(-)

diff --git a/stablehlo/conversions/linalg/tests/pointwise.mlir b/stablehlo/conversions/linalg/tests/pointwise.mlir
index 6dc76f24..7a9f71aa 100644
--- a/stablehlo/conversions/linalg/tests/pointwise.mlir
+++ b/stablehlo/conversions/linalg/tests/pointwise.mlir
@@ -23,6 +23,29 @@ func.func @float_add(%lhs: tensor<2x2xf32>,
 
 // -----
 
+// CHECK: #map = affine_map<(d0, d1) -> (d0, d1)>
+// CHECK-LABEL: func @complex_add_const
+// CHECK-PRIMITIVE-LABEL: func @complex_add_const
+func.func @complex_add_const(%lhs: tensor<2x2xcomplex<f32>>,
+                             %rhs: tensor<2x2xcomplex<f32>>)
+                             -> tensor<2x2xcomplex<f32>> {
+
+  // CHECK: %[[CST:.+]] = complex.constant [1.000000e-01 : f32, 2.000000e-01 : f32] : complex<f32>
+  // CHECK: linalg.generic
+  // CHECK: ^bb0(%[[IN:.+]]: complex<f32>, %[[OUT:.+]]: complex<f32>)
+  // CHECK: %[[RESULT:[a-zA-Z0-9_]*]] = complex.add %[[IN]], %[[CST]]
+  // CHECK: linalg.yield %[[RESULT]]
+
+  // CHECK-PRIMITIVE: linalg.map
+  // CHECK-PRIMITIVE: complex.add
+  %cst = stablehlo.constant dense<(0.1, 0.2)> : tensor<2x2xcomplex<f32>>
+  %0 = "stablehlo.add"(%lhs, %cst) {someattr}
+      : (tensor<2x2xcomplex<f32>>, tensor<2x2xcomplex<f32>>) -> tensor<2x2xcomplex<f32>>
+  func.return %0 : tensor<2x2xcomplex<f32>>
+}
+
+// -----
+
 // CHECK-LABEL: func @float_add_dynamic_encoding
 // CHECK-PRIMITIVE-LABEL: func @float_add_dynamic_encoding
 func.func @float_add_dynamic_encoding(
diff --git a/stablehlo/conversions/linalg/transforms/StablehloToLinalgPointwise.cpp b/stablehlo/conversions/linalg/transforms/StablehloToLinalgPointwise.cpp
index 707db6a7..301dfdc2 100644
--- a/stablehlo/conversions/linalg/transforms/StablehloToLinalgPointwise.cpp
+++ b/stablehlo/conversions/linalg/transforms/StablehloToLinalgPointwise.cpp
@@ -114,6 +114,28 @@ FailureOr<PointwiseConversionInfo> checkOperandsAndResults(
   return PointwiseConversionInfo{maxRank, resultTy};
 }
 
+/// If `input` is a splat constant value, materialize the scalar splat
+/// value. Otherwise, return nullopt.
+std::optional<Value> materializeSplatScalarConstant(RewriterBase &rewriter,
+                                                    Location loc, Value input) {
+  SplatElementsAttr attr;
+  Type elementType = mlir::getElementTypeOrSelf(input.getType());
+  if (!matchPattern(input, m_Constant(&attr))) return {};
+  if (isa<IntegerType, FloatType, IndexType>(elementType)) {
+    return rewriter
+        .create<arith::ConstantOp>(loc, elementType,
+                                   attr.getSplatValue<TypedAttr>())
+        .getResult();
+  }
+  if (isa<ComplexType>(elementType)) {
+    return rewriter
+        .create<complex::ConstantOp>(loc, elementType,
+                                     attr.getSplatValue<ArrayAttr>())
+        .getResult();
+  }
+  return {};
+}
+
 /// Converts a HLO operation to a linalg.map op that contains the corresponding
 /// scalar operations.
 template <typename OpTy>
@@ -160,11 +182,9 @@ struct PointwiseToLinalgMapConverter : OpConversionPattern<OpTy> {
     SmallVector<Value> mappedInputs;
     SmallVector<Value> scalarInputs;
     for (Value input : adaptor.getOperands()) {
-      DenseElementsAttr attr;
-      if (matchPattern(input, m_Constant(&attr)) && attr.isSplat()) {
-        scalarInputs.push_back(rewriter.create<arith::ConstantOp>(
-            loc, cast<ShapedType>(input.getType()).getElementType(),
-            attr.getSplatValue<TypedAttr>()));
+      if (std::optional<Value> splatVal =
+              materializeSplatScalarConstant(rewriter, loc, input)) {
+        scalarInputs.push_back(*splatVal);
       } else if (getRank(input) == maxRank) {
         mappedInputs.push_back(coerceTensorShape(
             rewriter, loc, cast<TypedValue<ShapedType>>(input),
-- 
2.46.0

